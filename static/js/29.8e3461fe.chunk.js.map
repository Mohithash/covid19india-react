{"version":3,"sources":["hooks/useResizeObserver.js","components/Timeseries.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","margin","React","memo","timeseries","dates","chartType","isUniform","isLog","t","useTranslation","refs","useRef","wrapperRef","highlightedDate","setHighlightedDate","length","getBarWidth","useCallback","T","axisWidth","getBoundingClientRect","width","Math","min","height","chartRight","chartBottom","barWidth","xScale","scaleTime","clamp","domain","parseIndiaDate","range","numTicksX","xAxis","g","attr","call","axisBottom","ticks","tickFormat","date","formatDate","xAxis2","yScale","tickValues","tickSize","select","style","yAxis","axisRight","tickPadding","uniformScaleMin","getStatistic","uniformScaleMax","max","yScaleUniformLinear","scaleLinear","nice","yScaleUniformLog","scaleLog","mousemove","xm","mouse","this","invert","isNaN","bisectDate","bisector","left","dateLeft","dateRight","mouseout","i","svg","transition","duration","D3_TRANSITION_DURATION","statistic","TIMESERIES_STATISTICS","generateYScale","color","COLORS","selectAll","data","join","enter","append","remove","pathLength","linePath","line","curve","curveMonotoneX","x","y","getTotalLength","update","attrTween","previous","interpolatePath","on","getStatisticDelta","deltaToday","yesterday","formatISO","subDays","representation","trail","useMemo","styles","map","element","push","animationDelay","Fragment","className","delta","key","classnames","capitalize","formatNumber","preserveAspectRatio","prevProps","currProps","equal","regionHighlighted","stateCode","districtName"],"mappings":"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","file":"static/js/29.8e3461fe.chunk.js","sourcesContent":["import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import {\n  COLORS,\n  D3_TRANSITION_DURATION,\n  TIMESERIES_STATISTICS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useResizeObserver';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  getStatistic,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {min, max, bisector} from 'd3-array';\nimport {axisBottom, axisRight} from 'd3-axis';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear, scaleLog} from 'd3-scale';\nimport {select, mouse} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useCallback, useEffect, useRef, useMemo, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\n\n// Chart margins\nconst margin = {top: 15, right: 35, bottom: 25, left: 25};\n\nfunction Timeseries({timeseries, dates, chartType, isUniform, isLog}) {\n  const {t} = useTranslation();\n  const refs = useRef([]);\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const [highlightedDate, setHighlightedDate] = useState();\n\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n\n  const getBarWidth = useCallback(() => {\n    const T = dates.length;\n    // Dimensions\n    const {width} = dimensions || wrapperRef.current.getBoundingClientRect();\n    // Chart extremes\n    const chartRight = width - margin.right;\n    // Bar widths\n    const axisWidth = chartRight - margin.left;\n    return Math.min(4, axisWidth / (1.25 * T));\n  }, [dates.length, dimensions]);\n\n  useEffect(() => {\n    const T = dates.length;\n    // Dimensions\n    const {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n    // Chart extremes\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const barWidth = getBarWidth();\n\n    // Buffer space along y-axis\n    const yBufferTop = 1.2;\n    const yBufferBottom = 1.1;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain(T ? [parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])] : [])\n      .range([margin.left, chartRight]);\n\n    // Number of x-axis ticks\n    const numTicksX = width < 480 ? 4 : 7;\n\n    const xAxis = (g) =>\n      g.attr('class', 'x-axis').call(\n        axisBottom(xScale)\n          .ticks(numTicksX)\n          .tickFormat((date) => formatDate(date, 'dd MMM'))\n      );\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2')\n        .call(axisBottom(xScale).tickValues([]).tickSize(0))\n        .select('.domain')\n        .style('transform', `translateY(${yScale(0)}px)`);\n\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n      else g.select('.domain').attr('opacity', 0);\n    };\n\n    const yAxis = (g, yScale) =>\n      g\n        .attr('class', 'y-axis')\n        .call(axisRight(yScale).ticks(4, '0~s').tickPadding(4));\n\n    const uniformScaleMin = min(dates, (date) =>\n      getStatistic(timeseries[date], chartType, 'active')\n    );\n\n    const uniformScaleMax = max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], chartType, 'confirmed'),\n        getStatistic(timeseries[date], chartType, 'recovered'),\n        getStatistic(timeseries[date], chartType, 'deceased')\n      )\n    );\n\n    const yScaleUniformLinear = scaleLinear()\n      .clamp(true)\n      .domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const yScaleUniformLog = scaleLog()\n      .clamp(true)\n      .domain([\n        Math.max(1, uniformScaleMin),\n        Math.max(10, yBufferTop * uniformScaleMax),\n      ])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const generateYScale = (statistic) => {\n      if (isUniform && chartType === 'total' && isLog && statistic !== 'tested')\n        return yScaleUniformLog;\n\n      if (isUniform && statistic !== 'tested') return yScaleUniformLinear;\n\n      if (chartType === 'total' && isLog)\n        return scaleLog()\n          .clamp(true)\n          .domain([\n            Math.max(\n              1,\n              min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n            Math.max(\n              10,\n              yBufferTop *\n                max(dates, (date) =>\n                  getStatistic(timeseries[date], chartType, statistic)\n                )\n            ),\n          ])\n          .nice(4)\n          .range([chartBottom, margin.top]);\n\n      return scaleLinear()\n        .clamp(true)\n        .domain([\n          yBufferBottom *\n            Math.min(\n              0,\n              min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n          Math.max(\n            1,\n            yBufferTop *\n              max(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n          ),\n        ])\n        .nice(4)\n        .range([chartBottom, margin.top]);\n    };\n\n    function mousemove() {\n      const xm = mouse(this)[0];\n      const date = xScale.invert(xm);\n      if (!isNaN(date)) {\n        const bisectDate = bisector((date) => parseIndiaDate(date)).left;\n        const index = bisectDate(dates, date, 1);\n        const dateLeft = dates[index - 1];\n        const dateRight = dates[index];\n        setHighlightedDate(\n          date - parseIndiaDate(dateLeft) < parseIndiaDate(dateRight) - date\n            ? dateLeft\n            : dateRight\n        );\n      }\n    }\n\n    function mouseout() {\n      setHighlightedDate(dates[T - 1]);\n    }\n\n    /* Begin drawing charts */\n    refs.current.forEach((ref, i) => {\n      const svg = select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      const statistic = TIMESERIES_STATISTICS[i];\n      const yScale = generateYScale(statistic);\n      const color = COLORS[statistic];\n\n      /* X axis */\n      svg\n        .select('.x-axis')\n        .style('transform', `translateY(${chartBottom}px)`)\n        .transition(t)\n        .call(xAxis);\n\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n\n      /* Y axis */\n      svg\n        .select('.y-axis')\n        .style('transform', `translateX(${chartRight}px)`)\n        .transition(t)\n        .call(yAxis, yScale);\n\n      /* Path dots */\n      svg\n        .selectAll('circle')\n        .data(dates, (date) => date)\n        .join((enter) =>\n          enter\n            .append('circle')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('cy', chartBottom)\n            .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        )\n        .transition(t)\n        .attr('r', barWidth / 2)\n        .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        .attr('cy', (date) =>\n          yScale(getStatistic(timeseries[date], chartType, statistic))\n        );\n\n      if (chartType === 'total') {\n        svg\n          .selectAll('.stem')\n          .transition(t)\n          .attr('y1', yScale(0))\n          .attr('y2', yScale(0))\n          .remove();\n\n        const linePath = line()\n          .curve(curveMonotoneX)\n          .x((date) => xScale(parseIndiaDate(date)))\n          .y((date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n\n        let pathLength;\n\n        svg\n          .selectAll('.trend')\n          .data(T ? [dates] : [])\n          .join(\n            (enter) =>\n              enter\n                .append('path')\n                .attr('class', 'trend')\n                .attr('fill', 'none')\n                .attr('stroke', color + '50')\n                .attr('stroke-width', 4)\n                .attr('d', linePath)\n                .attr('stroke-dasharray', function () {\n                  return (pathLength = this.getTotalLength());\n                })\n                .call((enter) =>\n                  enter\n                    .attr('stroke-dashoffset', pathLength)\n                    .transition(t)\n                    .attr('stroke-dashoffset', 0)\n                ),\n            (update) =>\n              update\n                .attr('stroke-dasharray', null)\n                .transition(t)\n                .attrTween('d', function (date) {\n                  const previous = select(this).attr('d');\n                  const current = linePath(date);\n                  return interpolatePath(previous, current);\n                })\n          );\n      } else {\n        /* DAILY TRENDS */\n        svg.selectAll('.trend').remove();\n\n        svg\n          .selectAll('.stem')\n          .data(dates, (date) => date)\n          .join((enter) =>\n            enter\n              .append('line')\n              .attr('class', 'stem')\n              .attr('stroke-width', barWidth)\n              .attr('x1', (date) => xScale(parseIndiaDate(date)))\n              .attr('y1', chartBottom)\n              .attr('x2', (date) => xScale(parseIndiaDate(date)))\n              .attr('y2', chartBottom)\n          )\n          .transition(t)\n          .attr('stroke-width', barWidth)\n          .attr('x1', (date) => xScale(parseIndiaDate(date)))\n          .attr('y1', yScale(0))\n          .attr('x2', (date) => xScale(parseIndiaDate(date)))\n          .attr('y2', (date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n      }\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg\n        .on('mousemove', mousemove)\n        .on('touchmove', mousemove)\n        .on('mouseout', mouseout)\n        .on('touchend', mouseout);\n    });\n  }, [chartType, dimensions, getBarWidth, isUniform, isLog, timeseries, dates]);\n\n  useEffect(() => {\n    const barWidth = getBarWidth();\n    refs.current.forEach((ref) => {\n      const svg = select(ref);\n      svg\n        .selectAll('circle')\n        .attr('r', (date) =>\n          date === highlightedDate ? barWidth : barWidth / 2\n        );\n    });\n  }, [highlightedDate, getBarWidth]);\n\n  const getStatisticDelta = useCallback(\n    (statistic) => {\n      if (!highlightedDate) return;\n      const deltaToday = getStatistic(\n        timeseries?.[highlightedDate],\n        'delta',\n        statistic\n      );\n      if (chartType === 'total') return deltaToday;\n\n      const yesterday = formatISO(subDays(parseIndiaDate(highlightedDate), 1), {\n        representation: 'date',\n      });\n      const deltaYesterday = getStatistic(\n        timeseries?.[yesterday],\n        'delta',\n        statistic\n      );\n      return deltaToday - deltaYesterday;\n    },\n    [timeseries, highlightedDate, chartType]\n  );\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"Timeseries\">\n        {TIMESERIES_STATISTICS.map((statistic, index) => {\n          const delta = getStatisticDelta(statistic, index);\n          return (\n            <div\n              key={statistic}\n              className={classnames('svg-parent fadeInUp', `is-${statistic}`)}\n              ref={wrapperRef}\n              style={trail[index]}\n            >\n              {highlightedDate && (\n                <div className={classnames('stats', `is-${statistic}`)}>\n                  <h5 className=\"title\">{t(capitalize(statistic))}</h5>\n                  <h5 className=\"title\">\n                    {formatDate(highlightedDate, 'dd MMMM')}\n                  </h5>\n                  <div className=\"stats-bottom\">\n                    <h2>\n                      {formatNumber(\n                        getStatistic(\n                          timeseries?.[highlightedDate],\n                          chartType,\n                          statistic\n                        )\n                      )}\n                    </h2>\n                    <h6>{`${delta >= 0 ? '+' : ''}${formatNumber(delta)}`}</h6>\n                  </div>\n                </div>\n              )}\n              <svg\n                ref={(element) => {\n                  refs.current[index] = element;\n                }}\n                preserveAspectRatio=\"xMidYMid meet\"\n              >\n                <g className=\"x-axis\" />\n                <g className=\"x-axis2\" />\n                <g className=\"y-axis\" />\n              </svg>\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  } else if (!equal(currProps.isUniform, prevProps.isUniform)) {\n    return false;\n  } else if (!equal(currProps.isLog, prevProps.isLog)) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Timeseries, isEqual);\n"],"sourceRoot":""}