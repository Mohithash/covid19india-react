{"version":3,"sources":["components/footer.js","hooks/useresizeobserver.js","components/level.js","components/minigraph.js","components/loaders/mapvisualizer.js","components/maplegend.js","components/mapvisualizer.js","components/tooltips.js","components/mapexplorer.js","components/timeseries.js","components/timeseriesexplorer.js","components/deltabargraph.js","components/statemetacard.js","components/statemeta.js","components/state.js"],"names":["React","memo","props","t","useTranslation","className","style","animationDelay","href","target","rel","justifyContent","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","LevelItem","statistic","total","delta","spring","useSpring","from","config","stiff","Fragment","capitalize","span","interpolate","formatNumber","Math","floor","size","verticalAlign","data","useTrail","transform","opacity","trail","set","PRIMARY_STATISTICS","map","div","key","classnames","getStatistic","prevProps","currProps","equal","timeseries","timelineDate","date","refs","useRef","dates","useMemo","today","getIndiaYesterdayISO","pastDates","Object","keys","filter","cutOffDate","formatISO","subDays","Date","MINIGRAPH_LOOKBACK_DAYS","representation","T","length","margin","chartRight","chartBottom","xScale","d3","clamp","domain","range","dailyMin","dailyMax","max","domainMinMax","yScale","pathLength","svg","color","COLORS","line","curve","x","y","selectAll","join","enter","append","attr","this","getTotalLength","call","transition","delay","duration","update","attrTween","previous","interpolatePath","el","width","height","viewBox","preserveAspectRatio","MapVisualizerLoader","INDIA_ASPECT_RATIO","speed","backgroundColor","cx","cy","r","MapLegend","mapScale","mapOption","svgRef","wrapperRef","getBoundingClientRect","MAP_OPTIONS","HOTSPOTS","D3_TRANSITION_DURATION","select","remove","domainMax","d","copy","tickSize","tickPadding","tickValues","tickFormat","g","title","marginTop","marginRight","marginBottom","marginLeft","ticks","ordinalWeights","tickAdjust","n","min","rangeRound","ramp","toDataURL","interpolator","assign","undefined","round","i","invertExtent","thresholds","quantiles","thresholdFormat","widthScale","reduce","a","b","xPos","w","slice","acc","bandwidth","on","text","node","legend","capitalizeAll","PER_MILLION","TOTAL","Number","isInteger","ZONES","MAP_LEGEND_HEIGHT","id","position","canvas","context","getContext","fillStyle","fillRect","colorInterpolator","confirmed","active","recovered","deceased","tested","getTotalStatistic","normalizer","MapVisualizer","currentMap","changeMap","regionHighlighted","setRegionHighlighted","isCountryLoaded","mapMeta","MAP_META","code","geoDataResponse","useSWR","geoDataFile","file","revalidateOnFocus","suspense","statisticMax","stateCodes","stateCode","includes","view","MAP_VIEWS","STATES","option","STATE_POPULATIONS_MIL","districts","values","districtData","statisticTotal","ZONE_COLORS","nice","geoData","topology","topojson","objects","graphObjectStates","graphObjectDistricts","projection","fitSize","path","features","f","district","properties","state","st_nm","obj","onceTouchedRegion","regionSelection","sel","STATE_CODES","districtName","stopPropagation","mapType","MAP_TYPES","STATE","stateData","zone","circlesData","value","UNKNOWN_DISTRICT_KEY","sort","centroid","meshStates","COUNTRY","meshDistricts","DISTRICTS","STATE_NAMES","each","highlighted","parentNode","appendChild","colorInterpolationFilters","type","testedToolTip","onClick","e","data-for","data-tip","data-event","data-event-off","effect","multiline","scrollHide","globalEventOff","emptyData","fromEntries","ctype","anchor","setAnchor","mapStatistic","setMapStatistic","history","useHistory","setWidth","mapExplorerRef","clientWidth","setCurrentMap","currentMapMeta","currentMapData","switchMap","useCallback","newMapMeta","topDistrict","ReactDOM","unstable_batchedUpdates","panelState","produce","draft","hoveredRegion","hoveredData","name","population_millions","springs","useSprings","MAP_STATISTICS","tension","stickied","hidden","window","innerWidth","action","focused","h1","h6","formatDate","meta","source","push","formatLastUpdated","fallback","handleTabClick","TT","chartType","isUniform","isLog","highlightedDate","setHighlightedDate","numTicksX","xAxis","xAxis2","yAxis","uniformScaleMin","uniformScaleMax","yScaleUniformLinear","yScaleUniformLog","mousemove","xm","invert","bisectDate","left","mouseout","TIMESERIES_STATISTICS","generateYScale","element","TIMESERIES_OPTIONS","MONTH","timeseriesOption","setTimeseriesOption","useLocalStorage","setChartType","setIsUniform","setIsLog","explorerElement","isVisible","useIsVisible","once","TWO_WEEKS","sub","weeks","months","display","htmlFor","checked","aria-label","onChange","disabled","selected","getDeltaStatistic","NUM_BARS_STATEPAGE","paddingInner","roundedBar","textSelection","val","prevVal","abs","h","sign","StateMetaCard","formula","description","StateMeta","population","indiaDate","format","getIndiaDate","prevWeekDate","prevWeekConfirmed","confirmedPerMillion","testPerMillion","totalConfirmedPerMillion","recoveryPercent","activePercent","deathPercent","growthRate","place","toFixed","last_updated","Breadcrumbs","stateName","Item","direction","Caret","Menu","to","useParams","toUpperCase","useMeasure","mapSwitcher","showAllDistricts","setShowAllDistricts","useEffectOnce","anime","targets","translateX","easing","fetcher","revalidateOnMount","refreshInterval","gridRowCount","gridColumnCount","districtCount","ceil","Helmet","content","STATE_POPULATIONS","gridTemplateRows","districtNameA","districtNameB","districtA","handleSort","every"],"mappings":"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","file":"static/js/State.a418e44e.chunk.js","sourcesContent":["import React from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Footer(props) {\n  const {t} = useTranslation();\n\n  return (\n    <footer className=\"fadeInUp\" style={{animationDelay: '2s'}}>\n      <h5>{t('We stand with everyone fighting on the frontlines')}</h5>\n\n      <div className=\"link\">\n        <a\n          href=\"https://github.com/covid19india\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          covid19india\n        </a>\n      </div>\n\n      <a\n        href=\"https://github.com/covid19india/covid19india-react\"\n        className=\"button github\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.GitHub />\n        <span>{t('Open Sourced on GitHub')}</span>\n      </a>\n\n      <a\n        className=\"button excel\"\n        href=\"http://patientdb.covid19india.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.Database />\n        <span>{t('Crowdsourced Patient Database')}</span>\n      </a>\n\n      <a\n        href=\"https://twitter.com/covid19indiaorg\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"button twitter\"\n        style={{justifyContent: 'center'}}\n      >\n        <Icon.Twitter />\n        <span>{t('View updates on Twitter')}</span>\n      </a>\n\n      <a\n        href=\"https://bit.ly/covid19crowd\"\n        className=\"button telegram\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.MessageCircle />\n        <span>{t('Join Telegram to Collaborate!')}</span>\n      </a>\n    </footer>\n  );\n}\n\nexport default React.memo(Footer);\n","import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import {PRIMARY_STATISTICS} from '../constants';\nimport {capitalize, formatNumber, getStatistic} from '../utils/commonfunctions';\n\nimport {HeartFillIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {animated, useSpring, config, useTrail} from 'react-spring';\n\nfunction PureLevelItem({statistic, total, delta}) {\n  const {t} = useTranslation();\n  const spring = useSpring(\n    {\n      total: total,\n      delta: delta,\n      from: {total: total, delta: delta},\n    },\n    config.stiff\n  );\n\n  return (\n    <React.Fragment>\n      <h5>{capitalize(t(statistic))}</h5>\n      <h4>\n        <animated.span>\n          {delta > 0 ? (\n            spring.delta.interpolate(\n              (delta) => `+${formatNumber(Math.floor(delta))}`\n            )\n          ) : (\n            <HeartFillIcon size={9} verticalAlign={2} />\n          )}\n        </animated.span>\n      </h4>\n      <h1>\n        <animated.span>\n          {spring.total.interpolate((total) => formatNumber(Math.floor(total)))}\n        </animated.span>\n      </h1>\n    </React.Fragment>\n  );\n}\n\nconst LevelItem = React.memo(PureLevelItem);\n\nfunction Level({data}) {\n  const [trail, set] = useTrail(4, () => ({\n    transform: 'translate3d(0, 20px, 0)',\n    opacity: 0,\n    config: config.stiff,\n  }));\n\n  set({transform: 'translate3d(0, 0px, 0)', opacity: 1});\n\n  return (\n    <div className=\"Level\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <animated.div\n          key={index}\n          className={classnames('level-item', `is-${statistic}`)}\n          style={trail[index]}\n        >\n          <LevelItem\n            {...{statistic}}\n            total={getStatistic(data, 'total', statistic)}\n            delta={getStatistic(data, 'delta', statistic)}\n          />\n        </animated.div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(\n      getStatistic(prevProps.data, 'total', 'active'),\n      getStatistic(currProps.data, 'total', 'active')\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Level, isEqual);\n","import {\n  COLORS,\n  MINIGRAPH_LOOKBACK_DAYS,\n  PRIMARY_STATISTICS,\n} from '../constants';\nimport {getStatistic, getIndiaYesterdayISO} from '../utils/commonfunctions';\n\nimport classnames from 'classnames';\nimport * as d3 from 'd3';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef, useMemo} from 'react';\n\nfunction Minigraph({timeseries, date: timelineDate}) {\n  const refs = useRef([]);\n\n  const dates = useMemo(() => {\n    const today = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries).filter((date) => date <= today);\n    const cutOffDate = formatISO(\n      subDays(new Date(today), MINIGRAPH_LOOKBACK_DAYS),\n      {representation: 'date'}\n    );\n    return pastDates.filter((date) => date >= cutOffDate);\n  }, [timeseries, timelineDate]);\n\n  useEffect(() => {\n    const T = dates.length;\n\n    const margin = {top: 10, right: 5, bottom: 20, left: 5};\n    const chartRight = 100 - margin.right;\n    const chartBottom = 100 - margin.bottom;\n\n    const xScale = d3\n      .scaleTime()\n      .clamp(true)\n      .domain([new Date(dates[0]), new Date(dates[T - 1])])\n      .range([margin.left, chartRight]);\n\n    const dailyMin = d3.min(dates, (date) =>\n      getStatistic(timeseries[date], 'delta', 'active')\n    );\n\n    const dailyMax = d3.max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], 'delta', 'confirmed'),\n        getStatistic(timeseries[date], 'delta', 'recovered'),\n        getStatistic(timeseries[date], 'delta', 'deceased')\n      )\n    );\n\n    const domainMinMax = Math.max(-dailyMin, dailyMax);\n\n    const yScale = d3\n      .scaleLinear()\n      .clamp(true)\n      .domain([-domainMinMax, domainMinMax])\n      .range([chartBottom, margin.top]);\n\n    refs.current.forEach((ref, index) => {\n      const svg = d3.select(ref);\n      const statistic = PRIMARY_STATISTICS[index];\n      const color = COLORS[statistic];\n\n      const line = d3\n        .line()\n        .curve(d3.curveMonotoneX)\n        .x((date) => xScale(new Date(date)))\n        .y((date) =>\n          yScale(getStatistic(timeseries[date], 'delta', statistic))\n        );\n\n      let pathLength;\n      svg\n        .selectAll('path')\n        .data([dates])\n        .join(\n          (enter) =>\n            enter\n              .append('path')\n              .attr('fill', 'none')\n              .attr('stroke', color + '99')\n              .attr('stroke-width', 2.5)\n              .attr('d', line)\n              .attr('stroke-dasharray', function () {\n                return (pathLength = this.getTotalLength());\n              })\n              .call((enter) =>\n                enter\n                  .attr('stroke-dashoffset', pathLength)\n                  .transition()\n                  .delay(100)\n                  .duration(2500)\n                  .attr('stroke-dashoffset', 0)\n              ),\n          (update) =>\n            update\n              .attr('stroke-dasharray', null)\n              .transition()\n              .duration(500)\n              .attrTween('d', function (date) {\n                const previous = d3.select(this).attr('d');\n                const current = line(date);\n                return interpolatePath(previous, current);\n              })\n        );\n\n      svg\n        .selectAll('circle')\n        .data([dates[T - 1]])\n        .join(\n          (enter) =>\n            enter\n              .append('circle')\n              .attr('fill', color)\n              .attr('r', 2.5)\n              .attr('cx', (date) => xScale(new Date(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n              .style('opacity', 0)\n              .call((enter) =>\n                enter\n                  .transition()\n                  .delay(2100)\n                  .duration(500)\n                  .style('opacity', 1)\n                  .attr('cx', (date) => xScale(new Date(date)))\n                  .attr('cy', (date) =>\n                    yScale(getStatistic(timeseries[date], 'delta', statistic))\n                  )\n              ),\n          (update) =>\n            update\n              .transition()\n              .duration(500)\n              .attr('cx', (date) => xScale(new Date(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n        );\n    });\n  }, [dates, timeseries]);\n\n  return (\n    <div className=\"Minigraph\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <div key={statistic} className={classnames('svg-parent')}>\n          <svg\n            ref={(el) => {\n              refs.current[index] = el;\n            }}\n            width=\"100\"\n            height=\"75\"\n            viewBox=\"0 0 100 75\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Minigraph, isEqual);\n","import {COLORS, INDIA_ASPECT_RATIO} from '../../constants';\n\nimport React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst MapVisualizerLoader = ({width, statistic}) => {\n  const height = width / INDIA_ASPECT_RATIO;\n  return (\n    <ContentLoader\n      viewBox={`0 0 ${width} ${height}`}\n      height={height}\n      width={width}\n      speed={2}\n      backgroundColor={COLORS[statistic]}\n    >\n      <circle cx={0.4 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.5 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.6 * width} cy={height / 2} r=\"5\" />\n    </ContentLoader>\n  );\n};\n\nexport default MapVisualizerLoader;\n","import {\n  D3_TRANSITION_DURATION,\n  MAP_LEGEND_HEIGHT,\n  MAP_OPTIONS,\n  // ZONE_COLORS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useresizeobserver';\nimport {capitalizeAll, formatNumber} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useEffect, useRef} from 'react';\n\nfunction MapLegend({data, mapScale, mapOption, statistic}) {\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // const totalZones = useMemo(() => {\n  //   return Object.values(data).reduce(\n  //     (counts, stateData) => {\n  //       if (stateData?.districts) {\n  //         Object.values(stateData.districts).forEach((districtData) => {\n  //           if (districtData?.zone?.status)\n  //             counts[districtData.zone.status] += 1;\n  //         });\n  //       }\n  //       return counts;\n  //     },\n  //     Object.keys(ZONE_COLORS).reduce((count, zone) => {\n  //       count[zone] = 0;\n  //       return count;\n  //     }, {})\n  //   );\n  // }, [data]);\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    let {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    if (!width || !height)\n      ({width, height} = wrapperRef.current.getBoundingClientRect());\n\n    // if (mapOption === MAP_OPTIONS.ZONES) {\n    //   svg.call(() =>\n    //     legend({\n    //       svg: svg,\n    //       color: mapScale,\n    //       width: width,\n    //       height: height,\n    //       tickValues: [],\n    //       marginLeft: 2,\n    //       marginRight: 20,\n    //       ordinalWeights: Object.values(totalZones),\n    //     })\n    //   );\n    // }\n    if (mapOption === MAP_OPTIONS.HOTSPOTS) {\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n      svg\n        .select('.ramp')\n        .transition(t)\n        .attr('opacity', 0)\n        .attr('xlink:href', null);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .transition(t)\n        .attr('opacity', 0)\n        .remove();\n      svg.selectAll('.axis > *').remove();\n\n      const domainMax = mapScale.domain()[1];\n\n      const legend = svg\n        .select('.circles')\n        .attr('transform', `translate(48,40)`)\n        .attr('text-anchor', 'middle');\n\n      legend\n        .selectAll('circle')\n        .data([domainMax / 10, (domainMax * 2) / 5, domainMax])\n        .join('circle')\n        .attr('fill', 'none')\n        .attr('stroke', '#ccc')\n        .transition(t)\n        .attr('cy', (d) => -mapScale(d))\n        .attr('r', mapScale);\n\n      const yScale = mapScale.copy().range([0, -2 * mapScale(domainMax)]);\n\n      svg\n        .select('.circleAxis')\n        .attr('transform', `translate(48,50)`)\n        .transition(t)\n        .call(\n          d3\n            .axisRight(yScale)\n            .tickSize(0)\n            .tickPadding(0)\n            .tickValues([domainMax / 10, (domainMax * 2) / 5, domainMax])\n            .tickFormat(d3.format('0~s'))\n        )\n        .selectAll('.tick text')\n        .style('text-anchor', 'middle');\n\n      svg.select('.circleAxis').call((g) => g.select('.domain').remove());\n    } else {\n      svg.call(() =>\n        legend({\n          svg: svg,\n          color: mapScale,\n          title:\n            capitalizeAll(statistic) +\n            (mapOption === MAP_OPTIONS.PER_MILLION\n              ? ' cases per million'\n              : ' cases'),\n          width: width,\n          height: height,\n          ticks: 5,\n          tickFormat: function (d, i, n) {\n            if (mapOption === MAP_OPTIONS.TOTAL && !Number.isInteger(d)) return;\n            if (i === n.length - 1) return formatNumber(d) + '+';\n            return formatNumber(d);\n          },\n          marginLeft: 2,\n          marginRight: 20,\n        })\n      );\n    }\n    svg.attr('class', mapOption === MAP_OPTIONS.ZONES ? 'zone' : '');\n  }, [dimensions, mapScale, mapOption, statistic]); // totalZones\n\n  return (\n    <div\n      className=\"svg-parent maplegend\"\n      style={{height: MAP_LEGEND_HEIGHT}}\n      ref={wrapperRef}\n    >\n      <svg id=\"legend\" preserveAspectRatio=\"xMidYMid meet\" ref={svgRef}>\n        <image className=\"ramp\" />\n        <g className=\"bars\"></g>\n        <g className=\"circles\"></g>\n        <g className=\"circleAxis\"></g>\n        <g className=\"axis\">\n          <text className=\"axistext\" />\n        </g>\n      </svg>\n      <canvas\n        className=\"color-scale\"\n        style={{position: 'absolute', height: 0}}\n      />\n    </div>\n  );\n}\n\nexport default MapLegend;\n\nfunction legend({\n  svg,\n  color,\n  title,\n  tickSize = 6,\n  width = 320,\n  height = 44 + tickSize,\n  marginTop = 18,\n  marginRight = 0,\n  marginBottom = 16 + tickSize,\n  marginLeft = 0,\n  ticks = width / 64,\n  tickFormat,\n  tickValues,\n  ordinalWeights,\n} = {}) {\n  svg.selectAll('.circles > *').remove();\n  svg.selectAll('.circleAxis > *').remove();\n  const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n  let tickAdjust = (g) => {\n    const ticks = g.selectAll('.tick line');\n    ticks.attr('y1', marginTop + marginBottom - height);\n    // d3.select(ticks.nodes()[ticks.size() - 1]).remove();\n  };\n  let x;\n\n  // Continuous\n  if (color.interpolate) {\n    const n = Math.min(color.domain().length, color.range().length);\n\n    x = color\n      .copy()\n      .rangeRound(\n        d3.quantize(d3.interpolate(marginLeft, width - marginRight), n)\n      );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr(\n        'xlink:href',\n        ramp(\n          color.copy().domain(d3.quantize(d3.interpolate(0, 1), n))\n        ).toDataURL()\n      );\n  }\n\n  // Sequential\n  else if (color.interpolator) {\n    svg\n      .select('.bars')\n      .selectAll('rect')\n      .transition(t)\n      .attr('opacity', 0)\n      .remove();\n\n    x = Object.assign(\n      color\n        .copy()\n        .interpolator(d3.interpolateRound(marginLeft, width - marginRight)),\n      {\n        range() {\n          return [marginLeft, width - marginRight];\n        },\n      }\n    );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr('xlink:href', ramp(color.interpolator()).toDataURL())\n      .transition(t)\n      .attr('opacity', 1);\n\n    // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        const n = Math.round(ticks + 1);\n        tickValues = d3\n          .range(n)\n          .map((i) => d3.quantile(color.domain(), i / (n - 1)));\n      }\n      if (typeof tickFormat !== 'function') {\n        tickFormat = d3.format(tickFormat === undefined ? ',f' : tickFormat);\n      }\n    }\n  }\n\n  // Threshold\n  else if (color.invertExtent) {\n    const thresholds = color.thresholds\n      ? color.thresholds() // scaleQuantize\n      : color.quantiles\n      ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n    const thresholdFormat =\n      tickFormat === undefined\n        ? (d) => d\n        : typeof tickFormat === 'string'\n        ? d3.format(tickFormat)\n        : tickFormat;\n\n    x = d3\n      .scaleLinear()\n      .domain([-1, color.range().length - 1])\n      .rangeRound([marginLeft, width - marginRight]);\n\n    svg\n      .append('g')\n      .selectAll('rect')\n      .data(color.range())\n      .join('rect')\n      .attr('x', (d, i) => x(i - 1))\n      .attr('y', marginTop)\n      .attr('width', (d, i) => x(i) - x(i - 1))\n      .attr('height', height - marginTop - marginBottom)\n      .attr('fill', (d) => d);\n\n    tickValues = d3.range(-1, thresholds.length);\n    tickFormat = (i) => {\n      if (i === -1) return thresholdFormat(1);\n      else if (i === thresholds.length - 1) return;\n      else if (i === thresholds.length - 2)\n        return thresholdFormat(thresholds[i] + '+', i);\n      return thresholdFormat(thresholds[i], i);\n    };\n  }\n\n  // Ordinal\n  else {\n    svg\n      .select('.ramp')\n      .transition(t)\n      .attr('opacity', 0)\n      .attr('xlink:href', null);\n    if (!ordinalWeights) {\n      x = d3\n        .scaleBand()\n        .domain(color.domain())\n        .rangeRound([marginLeft, width - marginRight]);\n      svg\n        .selectAll('rect')\n        .data(color.domain())\n        .join('rect')\n        .attr('x', x)\n        .attr('y', marginTop)\n        .attr('width', Math.max(0, x.bandwidth() - 1))\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color);\n    } else {\n      const widthScale = d3\n        .scaleLinear()\n        .domain([0, ordinalWeights.reduce((a, b) => a + b)])\n        .rangeRound([0, width - marginLeft - marginRight]);\n\n      const xPos = ordinalWeights.map((w, i) =>\n        ordinalWeights\n          .slice(0, i)\n          .reduce((acc, w) => acc + widthScale(w), marginLeft)\n      );\n\n      x = d3.scaleOrdinal().domain(color.domain()).range(xPos);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .data(color.domain())\n        .join((enter) =>\n          enter\n            .append('rect')\n            .attr('x', x)\n            .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        )\n        .attr('y', marginTop)\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color)\n        .transition(t)\n        .attr('x', x)\n        .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        .attr('opacity', 1);\n    }\n\n    tickAdjust = () => {};\n  }\n\n  svg\n    .select('.axis')\n    .attr('transform', `translate(0,${height - marginBottom})`)\n    .transition(t)\n    .attr('class', 'axis')\n    .call(\n      d3\n        .axisBottom(x)\n        .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n        .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n        .tickSize(tickSize)\n        .tickValues(tickValues)\n    )\n    .on('start', () => {\n      svg.call(tickAdjust).call((svg) => svg.select('.domain').remove());\n    })\n    .call((g) =>\n      g\n        .select('.axistext')\n        .attr('class', 'axistext')\n        .attr('x', marginLeft)\n        .attr('y', marginTop + marginBottom - height - 6)\n        .attr('fill', 'currentColor')\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(title)\n    );\n\n  return svg.node();\n}\n\nfunction ramp(color, n = 256) {\n  // const canvas = document.createElement('canvas');\n  const canvas = d3.select('.color-scale').node();\n  const context = ((canvas.width = n), (canvas.height = 1), canvas).getContext(\n    '2d'\n  );\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n  return canvas;\n}\n","import MapLegend from './maplegend';\n\nimport {\n  COLORS,\n  D3_TRANSITION_DURATION,\n  MAP_META,\n  MAP_TYPES,\n  MAP_OPTIONS,\n  MAP_VIEWS,\n  STATE_CODES,\n  STATE_NAMES,\n  STATE_POPULATIONS_MIL,\n  UNKNOWN_DISTRICT_KEY,\n  ZONE_COLORS,\n} from '../constants';\nimport {\n  capitalizeAll,\n  formatNumber,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useEffect, useMemo, useRef} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport useSWR from 'swr';\nimport * as topojson from 'topojson';\n\nconst colorInterpolator = {\n  confirmed: (t) => d3.interpolateReds(t * 0.85),\n  active: (t) => d3.interpolateBlues(t * 0.85),\n  recovered: (t) => d3.interpolateGreens(t * 0.85),\n  deceased: (t) => d3.interpolateGreys(t * 0.85),\n  tested: (t) => d3.interpolatePurples(t * 0.85),\n};\n\nconst getTotalStatistic = (data, statistic, normalizer = 1) => {\n  return getStatistic(data, 'total', statistic, normalizer);\n};\n\nfunction MapVisualizer({\n  currentMap,\n  data,\n  changeMap,\n  regionHighlighted,\n  setRegionHighlighted,\n  statistic,\n  isCountryLoaded,\n}) {\n  const {t} = useTranslation();\n  const svgRef = useRef(null);\n\n  const mapMeta = MAP_META[currentMap.code];\n\n  const geoDataResponse = useSWR(\n    mapMeta.geoDataFile,\n    async (file) => {\n      return await d3.json(file);\n    },\n    {revalidateOnFocus: false, suspense: true}\n  );\n\n  const statisticMax = useMemo(() => {\n    const stateCodes = Object.keys(data).filter(\n      (stateCode) =>\n        stateCode !== 'TT' && Object.keys(MAP_META).includes(stateCode)\n    );\n    return currentMap.view === MAP_VIEWS.STATES\n      ? d3.max(stateCodes, (stateCode) =>\n          getTotalStatistic(\n            data[stateCode],\n            statistic,\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? STATE_POPULATIONS_MIL[stateCode]\n              : 1\n          )\n        )\n      : d3.max(stateCodes, (stateCode) =>\n          data[stateCode]?.districts\n            ? d3.max(Object.values(data[stateCode].districts), (districtData) =>\n                getTotalStatistic(districtData, statistic)\n              )\n            : 0\n        );\n  }, [data, currentMap.option, currentMap.view, statistic]);\n\n  const statisticTotal = useMemo(() => {\n    return getTotalStatistic(\n      data[currentMap.code],\n      statistic,\n      currentMap.option === MAP_OPTIONS.PER_MILLION\n        ? STATE_POPULATIONS_MIL[currentMap.code]\n        : 1\n    );\n  }, [data, currentMap.code, currentMap.option, statistic]);\n\n  const mapScale = useMemo(() => {\n    if (currentMap.option === MAP_OPTIONS.ZONES) {\n      return d3.scaleOrdinal(\n        Object.keys(ZONE_COLORS),\n        Object.values(ZONE_COLORS)\n      );\n    } else if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      const {width} = svgRef.current.getBoundingClientRect();\n      return d3\n        .scaleSqrt([0, Math.max(statisticMax, 1)], [0, width / 10])\n        .clamp(true)\n        .nice(3);\n    } else {\n      return d3\n        .scaleSequential(\n          [0, Math.max(1, statisticMax)],\n          colorInterpolator[statistic]\n        )\n        .clamp(true);\n    }\n  }, [currentMap.option, statistic, statisticMax]);\n\n  useEffect(() => {\n    if (!geoDataResponse.data) return;\n    const geoData = geoDataResponse.data;\n\n    const topology = topojson.feature(\n      geoData,\n      geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]\n    );\n\n    const svg = d3.select(svgRef.current);\n\n    const {width, height} = svgRef.current.getBoundingClientRect();\n    const projection = d3.geoMercator().fitSize([width, height], topology);\n    const path = d3.geoPath(projection);\n\n    // Add id to each feature\n    let features =\n      currentMap.option !== MAP_OPTIONS.HOTSPOTS\n        ? currentMap.view === MAP_VIEWS.STATES\n          ? topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features\n          : topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features\n        : [\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features,\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features,\n          ];\n\n    features = features.map((f) => {\n      const district = f.properties.district;\n      const state = f.properties.st_nm;\n      const obj = Object.assign({}, f);\n      obj.id = `${currentMap.code}-${state}${district ? '-' + district : ''}`;\n      return obj;\n    });\n\n    /* Draw map */\n    const t = d3.transition().duration(D3_TRANSITION_DURATION);\n    let onceTouchedRegion = null;\n    const regionSelection = svg\n      .select('.regions')\n      .selectAll('path')\n      .data(\n        currentMap.option !== MAP_OPTIONS.HOTSPOTS ? features : [],\n        (d) => d.id\n      )\n      .join((enter) => {\n        const sel = enter\n          .append('path')\n          .attr('d', path)\n          .attr('stroke-width', 2)\n          .attr('stroke-opacity', 0)\n          .style('cursor', 'pointer')\n          .on('mouseenter', (d) => {\n            setRegionHighlighted({\n              stateCode: STATE_CODES[d.properties.st_nm],\n              districtName: d.properties.district,\n            });\n          })\n          .on('mouseleave', (d) => {\n            if (onceTouchedRegion === d) onceTouchedRegion = null;\n          })\n          .on('touchstart', (d) => {\n            if (onceTouchedRegion === d) onceTouchedRegion = null;\n            else onceTouchedRegion = d;\n          })\n          .on('click', (d) => {\n            d3.event.stopPropagation();\n            if (onceTouchedRegion || mapMeta.mapType === MAP_TYPES.STATE)\n              return;\n            // Disable pointer events till the new map is rendered\n            svg.attr('pointer-events', 'none');\n            svg\n              .select('.regions')\n              .selectAll('path')\n              .attr('pointer-events', 'none');\n            // Switch map\n            changeMap(STATE_CODES[d.properties.st_nm]);\n          });\n        sel.append('title');\n        return sel;\n      })\n      .attr('pointer-events', 'all');\n\n    regionSelection\n      .transition(t)\n      .attr('fill', (d) => {\n        const stateCode = STATE_CODES[d.properties.st_nm];\n        const district = d.properties.district;\n        const stateData = data[stateCode];\n        const districtData = stateData?.districts?.[district];\n        let n;\n        if (currentMap.option === MAP_OPTIONS.ZONES) {\n          n = districtData?.zone || 0;\n        } else {\n          if (district) n = getTotalStatistic(districtData, statistic);\n          else\n            n = getTotalStatistic(\n              stateData,\n              statistic,\n              currentMap.option === MAP_OPTIONS.PER_MILLION\n                ? STATE_POPULATIONS_MIL[stateCode]\n                : 1\n            );\n        }\n        const color = n === 0 ? '#ffffff00' : mapScale(n);\n        return color;\n      })\n      .attr(\n        'stroke',\n        currentMap.option === MAP_OPTIONS.ZONES ? '#343a40' : COLORS[statistic]\n      );\n\n    regionSelection.select('title').text((d) => {\n      if (currentMap.option === MAP_OPTIONS.TOTAL) {\n        const state = d.properties.st_nm;\n        const stateCode = STATE_CODES[state];\n        const district = d.properties.district;\n\n        const stateData = data[stateCode];\n        const districtData = stateData?.districts?.[district];\n        let n;\n        if (district) n = getTotalStatistic(districtData, statistic);\n        else n = getTotalStatistic(stateData, statistic);\n        return (\n          formatNumber(100 * (n / (statisticTotal || 0.001))) +\n          '% from ' +\n          capitalizeAll(district ? district : state)\n        );\n      }\n    });\n\n    svg\n      .transition()\n      .duration(mapMeta.mapType === MAP_TYPES.STATE ? t.duration() / 2 : 0)\n      .on('end', () =>\n        svg.attr('class', currentMap.option === MAP_OPTIONS.ZONES ? 'zone' : '')\n      );\n\n    /* ----------BUBBLE MAP----------*/\n    let circlesData = [];\n    if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      circlesData = features\n        .map((d) => {\n          const stateCode = STATE_CODES[d.properties.st_nm];\n          const district = d.properties.district;\n\n          const stateData = data[stateCode];\n          const districtData = stateData?.districts?.[district];\n          if (district) d.value = getTotalStatistic(districtData, statistic);\n          else\n            d.value = getTotalStatistic(\n              stateData?.districts?.[UNKNOWN_DISTRICT_KEY],\n              statistic\n            );\n          return d;\n        })\n        .sort((a, b) => b.value - a.value);\n    }\n\n    svg\n      .select('.circles')\n      .selectAll('circle')\n      .data(circlesData, (d) => d.id)\n      .join((enter) =>\n        enter\n          .append('circle')\n          .attr('transform', (d) => `translate(${path.centroid(d)})`)\n          .attr('fill-opacity', 0.5)\n          .style('cursor', 'pointer')\n          .attr('pointer-events', 'all')\n          .on('mouseenter', (d) => {\n            setRegionHighlighted({\n              stateCode: STATE_CODES[d.properties.st_nm],\n              districtName: d.properties.district || UNKNOWN_DISTRICT_KEY,\n            });\n          })\n          .on('click', () => {\n            d3.event.stopPropagation();\n          })\n      )\n      .transition(t)\n      .attr('fill', COLORS[statistic] + '70')\n      .attr('stroke', COLORS[statistic] + '70')\n      .attr('r', (d) => mapScale(d.value));\n    /* ------------------------------*/\n\n    let meshStates = [];\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n      meshStates = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates]),\n      ];\n      meshStates[0].id = mapMeta.graphObjectStates;\n    }\n    let meshDistricts = [];\n    if (currentMap.view === MAP_VIEWS.DISTRICTS) {\n      // Add id to mesh\n      meshDistricts = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts]),\n      ];\n      meshDistricts[0].id = mapMeta.graphObjectDistricts;\n    }\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.state-borders'\n          : '.district-borders'\n      )\n      .attr('fill', 'none')\n      .attr('stroke-width', function () {\n        return mapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n          ? 0\n          : width / 250;\n      })\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshStates : meshDistricts,\n        (d) => d.id\n      )\n      .join((enter) => enter.append('path').attr('d', path))\n      .transition(t)\n      .attr('stroke', () => {\n        if (currentMap.option === MAP_OPTIONS.ZONES) {\n          return '#00000060';\n        } else {\n          return COLORS[statistic] + '30';\n        }\n      });\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.district-borders'\n          : '.state-borders'\n      )\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshDistricts : meshStates,\n        (d) => d.id\n      )\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('d', path)\n          .attr('fill', 'none')\n          .attr('stroke-width', width / 250)\n      )\n      .transition(t)\n      .attr('stroke', '#343a4050');\n\n    // Reset on tapping outside map\n    svg.attr('pointer-events', 'auto').on('click', () => {\n      if (mapMeta.mapType !== MAP_TYPES.STATE) {\n        setRegionHighlighted({\n          stateCode: 'TT',\n          districtName: null,\n        });\n      }\n    });\n  }, [\n    geoDataResponse.data,\n    data,\n    mapMeta,\n    currentMap,\n    setRegionHighlighted,\n    changeMap,\n    isCountryLoaded,\n    mapScale,\n    statistic,\n    statisticTotal,\n  ]);\n\n  useEffect(() => {\n    if (!geoDataResponse.data) return;\n    const state = STATE_NAMES[regionHighlighted.stateCode];\n    const district = regionHighlighted.districtName;\n\n    const svg = d3.select(svgRef.current);\n    if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      svg\n        .select('.circles')\n        .selectAll('circle')\n        .attr('fill-opacity', (d) => {\n          const highlighted =\n            state === d.properties.st_nm &&\n            (!district ||\n              district === d.properties?.district ||\n              (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\n          return highlighted ? 1 : 0.5;\n        });\n    } else {\n      svg\n        .select('.regions')\n        .selectAll('path')\n        .each(function (d) {\n          const highlighted =\n            state === d.properties.st_nm &&\n            (currentMap.view === MAP_VIEWS.STATES ||\n              district === d.properties?.district);\n          if (highlighted) this.parentNode.appendChild(this);\n          d3.select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n        });\n    }\n  }, [\n    geoDataResponse.data,\n    data,\n    currentMap.option,\n    currentMap.view,\n    regionHighlighted.stateCode,\n    regionHighlighted.districtName,\n    statistic,\n  ]);\n\n  return (\n    <React.Fragment>\n      <div className=\"svg-parent map-parent\">\n        <svg id=\"chart\" preserveAspectRatio=\"xMidYMid meet\" ref={svgRef}>\n          <g className=\"regions\" />\n          <g className=\"state-borders\" />\n          {currentMap.view === MAP_VIEWS.DISTRICTS && (\n            <g className=\"district-borders\" />\n          )}\n          {currentMap.option === MAP_OPTIONS.HOTSPOTS && (\n            <g className=\"circles\" />\n          )}\n        </svg>\n        {mapMeta.mapType === MAP_TYPES.STATE &&\n          !!getTotalStatistic(\n            data[currentMap.code]?.districts?.[UNKNOWN_DISTRICT_KEY],\n            statistic\n          ) && (\n            <div className=\"disclaimer\">\n              <Icon.AlertCircle />\n              {t('District-wise {{statistic}} numbers need reconciliation', {\n                statistic: t(statistic),\n              })}\n            </div>\n          )}\n      </div>\n\n      {mapScale && (\n        <MapLegend\n          data={data}\n          mapScale={mapScale}\n          mapOption={currentMap.option}\n          statistic={statistic}\n        />\n      )}\n\n      <svg style={{position: 'absolute', height: 0}}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549  0           0            0  0.08627451\n                      0           0.91372549  0            0  0.08627451\n                      0           0           0.854901961  0  0.145098039\n                      0           0           0            1  0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n    </React.Fragment>\n  );\n}\n\nexport default MapVisualizer;\n","import React from 'react';\nimport * as Icon from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nexport const testedToolTip = (\n  <span className=\"tooltip-tested\" onClick={(e) => e.stopPropagation()}>\n    <Icon.Info\n      data-for=\"tested\"\n      data-tip=\"Reporting total samples tested from ICMR data\"\n      data-event=\"touchstart mouseover\"\n      data-event-off=\"mouseleave\"\n    />\n    <ReactTooltip\n      id=\"tested\"\n      effect=\"solid\"\n      multiline={true}\n      scrollHide={true}\n      globalEventOff=\"click\"\n    />\n  </span>\n);\n","import MapVisualizerLoader from './loaders/mapvisualizer';\nimport MapVisualizer from './mapvisualizer';\nimport {testedToolTip} from './tooltips';\n\nimport {\n  MAP_META,\n  MAP_OPTIONS,\n  MAP_STATISTICS,\n  MAP_TYPES,\n  MAP_VIEWS,\n  STATE_NAMES,\n  STATE_POPULATIONS_MIL,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  formatLastUpdated,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport {PinIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Suspense,\n} from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSprings, animated} from 'react-spring';\n\nconst emptyData = () => {\n  return Object.fromEntries(\n    ['total', 'delta'].map((ctype) => [\n      ctype,\n      {\n        active: 0,\n        confirmed: 0,\n        deceased: 0,\n        recovered: 0,\n      },\n    ])\n  );\n};\n\nfunction MapExplorer({\n  stateCode,\n  data,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  mapStatistic,\n  setMapStatistic,\n  isCountryLoaded = true,\n}) {\n  const {t} = useTranslation();\n  const history = useHistory();\n\n  const [width, setWidth] = useState(480);\n  const mapExplorerRef = useRef();\n\n  useEffect(() => {\n    setWidth(mapExplorerRef.current.clientWidth);\n  }, []);\n\n  const [currentMap, setCurrentMap] = useState({\n    code: stateCode,\n    view:\n      MAP_META[stateCode].mapType === MAP_TYPES.COUNTRY\n        ? MAP_VIEWS.STATES\n        : MAP_VIEWS.DISTRICTS,\n    option: MAP_OPTIONS.TOTAL,\n  });\n  const currentMapMeta = MAP_META[currentMap.code];\n\n  const currentMapData =\n    currentMapMeta.mapType === MAP_TYPES.COUNTRY\n      ? data\n      : {[currentMap.code]: data[currentMap.code]};\n\n  useEffect(() => {\n    if (regionHighlighted.districtName) {\n      if (\n        currentMap.code !== regionHighlighted.stateCode &&\n        !(\n          currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n        )\n      ) {\n        const newMapMeta = MAP_META[regionHighlighted.stateCode];\n        if (!newMapMeta) {\n          return;\n        }\n        setCurrentMap({\n          code: regionHighlighted.stateCode,\n          view: MAP_VIEWS.DISTRICTS,\n          option:\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? MAP_OPTIONS.TOTAL\n              : currentMap.option,\n        });\n      }\n    } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.STATE) {\n      setCurrentMap({\n        code: 'TT',\n        view:\n          currentMap.option === MAP_OPTIONS.ZONES\n            ? MAP_VIEWS.DISTRICTS\n            : MAP_VIEWS.STATES,\n        option: currentMap.option,\n      });\n    }\n  }, [\n    isCountryLoaded,\n    regionHighlighted.stateCode,\n    regionHighlighted.districtName,\n    currentMap.code,\n    currentMap.option,\n    currentMap.view,\n    currentMapMeta.mapType,\n  ]);\n\n  const switchMap = useCallback(\n    (stateCode) => {\n      const newMapMeta = MAP_META[stateCode];\n      if (!newMapMeta) {\n        return;\n      }\n      if (newMapMeta.mapType === MAP_TYPES.STATE) {\n        const districts = data[stateCode].districts;\n        const topDistrict = Object.keys(districts).sort(\n          (a, b) =>\n            getStatistic(districts[b], 'total', mapStatistic) -\n            getStatistic(districts[a], 'total', mapStatistic)\n        )[0];\n        ReactDOM.unstable_batchedUpdates(() => {\n          setRegionHighlighted({\n            stateCode: stateCode,\n            districtName: topDistrict,\n          });\n          setCurrentMap({\n            code: stateCode,\n            view: MAP_VIEWS.DISTRICTS,\n            option:\n              currentMap.option === MAP_OPTIONS.PER_MILLION\n                ? MAP_OPTIONS.TOTAL\n                : currentMap.option,\n          });\n        });\n      } else {\n        ReactDOM.unstable_batchedUpdates(() => {\n          setCurrentMap({\n            code: 'TT',\n            view:\n              currentMap.option === MAP_OPTIONS.ZONES\n                ? MAP_VIEWS.DISTRICTS\n                : MAP_VIEWS.STATES,\n            option: currentMap.option,\n          });\n          setRegionHighlighted({\n            stateCode: 'TT',\n            districtName: null,\n          });\n        });\n      }\n    },\n    [data, currentMap.option, mapStatistic, setRegionHighlighted]\n  );\n\n  const panelState = useMemo(() => {\n    const stateCode =\n      currentMap.view === MAP_VIEWS.STATES\n        ? regionHighlighted.stateCode\n        : currentMap.code;\n    const stateData = data[stateCode] || emptyData();\n    return produce(stateData, (draft) => {\n      draft.state = STATE_NAMES[stateCode];\n    });\n  }, [data, regionHighlighted.stateCode, currentMap.view, currentMap.code]);\n\n  const hoveredRegion = useMemo(() => {\n    const hoveredData =\n      (regionHighlighted.districtName\n        ? data[regionHighlighted.stateCode]?.districts?.[\n            regionHighlighted.districtName\n          ]\n        : data[regionHighlighted.stateCode]) || emptyData();\n    return produce(hoveredData, (draft) => {\n      draft.name =\n        regionHighlighted.districtName ||\n        STATE_NAMES[regionHighlighted.stateCode];\n      if (!regionHighlighted.districtName)\n        draft.population_millions =\n          STATE_POPULATIONS_MIL[regionHighlighted.stateCode];\n    });\n  }, [data, regionHighlighted.stateCode, regionHighlighted.districtName]);\n\n  const handleTabClick = (option) => {\n    switch (option) {\n      case MAP_OPTIONS.TOTAL:\n        setCurrentMap({\n          code: currentMap.code,\n          view:\n            currentMapMeta.mapType === MAP_TYPES.COUNTRY\n              ? MAP_VIEWS.STATES\n              : MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.TOTAL,\n        });\n        if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n          setRegionHighlighted({\n            stateCode: regionHighlighted.stateCode,\n            districtName: null,\n          });\n        return;\n      case MAP_OPTIONS.PER_MILLION:\n        if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.STATES,\n          option: MAP_OPTIONS.PER_MILLION,\n        });\n        setRegionHighlighted({\n          stateCode: regionHighlighted.stateCode,\n          districtName: null,\n        });\n        return;\n      case MAP_OPTIONS.HOTSPOTS:\n        if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.HOTSPOTS,\n        });\n        return;\n      case MAP_OPTIONS.ZONES:\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.ZONES,\n        });\n        if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n          setRegionHighlighted({\n            stateCode: 'TT',\n            districtName: null,\n          });\n        return;\n      default:\n        return;\n    }\n  };\n\n  const springs = useSprings(\n    MAP_STATISTICS.length,\n    MAP_STATISTICS.map((statistic) => ({\n      total: getStatistic(panelState, 'total', statistic),\n      delta: getStatistic(panelState, 'delta', statistic),\n      from: {\n        total: getStatistic(panelState, 'total', statistic),\n        delta: getStatistic(panelState, 'delta', statistic),\n      },\n      config: {\n        tension: 500,\n        clamp: true,\n      },\n    }))\n  );\n\n  return (\n    <div\n      className={classnames(\n        'MapExplorer',\n        {stickied: anchor === 'mapexplorer'},\n        {hidden: anchor && anchor !== 'mapexplorer'}\n      )}\n    >\n      {window.innerWidth > 769 && (\n        <div\n          className={classnames('anchor', {stickied: anchor === 'mapexplorer'})}\n          onClick={() => {\n            setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n          }}\n        >\n          <PinIcon />\n        </div>\n      )}\n\n      <div className=\"header\">\n        <h1>\n          {currentMap.code === 'TT'\n            ? t('India')\n            : t(STATE_NAMES[currentMap.code])}{' '}\n          {t('Map')}\n        </h1>\n        <h6>\n          {t('{{action}} over a {{mapType}} for more details', {\n            action: t(window.innerWidth <= 769 ? 'Tap' : 'Hover'),\n            mapType: t(\n              currentMapMeta.mapType === MAP_TYPES.COUNTRY\n                ? 'state/UT'\n                : 'District'\n            ),\n          })}\n        </h6>\n      </div>\n\n      <div className=\"map-stats\">\n        {MAP_STATISTICS.map((statistic, index) => (\n          <div\n            key={statistic}\n            className={classnames('stats', statistic, {\n              focused: statistic === mapStatistic,\n            })}\n            onClick={() => setMapStatistic(statistic)}\n          >\n            <h5>{t(capitalize(statistic))}</h5>\n            <div className=\"stats-bottom\">\n              <animated.h1>\n                {springs[index].total.interpolate((total) =>\n                  formatNumber(Math.floor(total))\n                )}\n              </animated.h1>\n              {statistic !== 'tested' && (\n                <animated.h6>\n                  {springs[index].delta.interpolate((delta) =>\n                    delta > 0 ? `+${formatNumber(Math.floor(delta))}` : ''\n                  )}\n                </animated.h6>\n              )}\n              {statistic === 'tested' && (\n                <h6>\n                  {panelState?.total?.tested &&\n                    t('As of {{date}}', {\n                      date: formatDate(\n                        panelState.meta.tested['last_updated'],\n                        'dd MMM'\n                      ),\n                    })}\n                </h6>\n              )}\n            </div>\n            {statistic === 'tested' && panelState?.total?.tested && (\n              <a href={panelState.meta.tested.source} target=\"_noblank\">\n                <Icon.Link />\n              </a>\n            )}\n            {statistic === 'tested' &&\n              panelState.state === 'Total' &&\n              testedToolTip}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"meta\">\n        {currentMapMeta.mapType === MAP_TYPES.STATE && (\n          <div\n            className=\"map-button\"\n            onClick={() => history.push(`state/${currentMap.code}`)}\n          >\n            {t('Visit state page')}\n            <Icon.ArrowRightCircle />\n          </div>\n        )}\n\n        {currentMapMeta.mapType !== MAP_TYPES.STATE &&\n          panelState?.meta?.['last_updated'] && (\n            <div className=\"last-update\">\n              <h6>{t('Last updated')}</h6>\n              <h3>\n                {`${formatLastUpdated(panelState.meta['last_updated'])} ${t(\n                  'ago'\n                )}`}\n              </h3>\n            </div>\n          )}\n\n        <h2\n          className={classnames(mapStatistic, {\n            [hoveredRegion?.zone]: currentMap.option === MAP_OPTIONS.ZONES,\n          })}\n        >\n          {t(hoveredRegion.name)}\n          {hoveredRegion.name === UNKNOWN_DISTRICT_KEY &&\n            ` (${t(STATE_NAMES[regionHighlighted.stateCode])})`}\n        </h2>\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE && (\n          <div className=\"map-button\" onClick={() => switchMap('TT')}>\n            {t('Back')}\n          </div>\n        )}\n\n        {currentMap.option !== MAP_OPTIONS.ZONES &&\n          ((currentMap.view === MAP_VIEWS.DISTRICTS &&\n            regionHighlighted.districtName) ||\n            (currentMap.view === MAP_VIEWS.STATES &&\n              currentMap.option !== MAP_OPTIONS.TOTAL)) && (\n            <h1 className={classnames('district', mapStatistic)}>\n              {formatNumber(\n                getStatistic(\n                  hoveredRegion,\n                  'total',\n                  mapStatistic,\n                  currentMap.option === MAP_OPTIONS.PER_MILLION\n                    ? hoveredRegion.population_millions\n                    : 1\n                )\n              )}\n              <br />\n              <span>\n                {t(mapStatistic)}\n                {currentMap.option === MAP_OPTIONS.PER_MILLION &&\n                  ` ${t('per million')}`}\n              </span>\n            </h1>\n          )}\n      </div>\n\n      <div ref={mapExplorerRef}>\n        {mapStatistic && (\n          <Suspense\n            fallback={\n              <MapVisualizerLoader {...{width, statistic: mapStatistic}} />\n            }\n          >\n            <MapVisualizer\n              currentMap={currentMap}\n              data={currentMapData}\n              changeMap={switchMap}\n              regionHighlighted={regionHighlighted}\n              setRegionHighlighted={setRegionHighlighted}\n              statistic={mapStatistic}\n              isCountryLoaded={isCountryLoaded}\n            />\n          </Suspense>\n        )}\n      </div>\n\n      <div className=\"tabs-map\">\n        {Object.values(MAP_OPTIONS).map((option) => (\n          <div\n            key={option}\n            className={classnames('tab', {\n              focused: currentMap.option === option,\n            })}\n            onClick={() => handleTabClick(option)}\n          >\n            <h4>\n              {t(option)}\n              {option === MAP_OPTIONS.PER_MILLION && <sup>&dagger;</sup>}\n            </h4>\n          </div>\n        ))}\n      </div>\n\n      <h6 className={classnames('footnote', 'table-fineprint')}>\n        &dagger; {`${t('Based on 2019 population projection by NCP')} (`}\n        <a\n          href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n          target=\"_noblank\"\n          style={{color: '#6c757d'}}\n        >\n          {t('source')}\n        </a>\n        )\n      </h6>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  }\n  if (!equal(prevProps.mapStatistic, currProps.mapStatistic)) {\n    return false;\n  }\n  if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  }\n  if (\n    !equal(\n      prevProps.data?.TT?.meta?.['last_updated'],\n      currProps.data?.TT?.meta?.['last_updated']\n    )\n  ) {\n    return false;\n  }\n  if (!equal(prevProps.data?.TT?.total, currProps.data?.TT?.total)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(MapExplorer, isEqual);\n","import {\n  COLORS,\n  D3_TRANSITION_DURATION,\n  TIMESERIES_STATISTICS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useresizeobserver';\nimport {\n  formatNumber,\n  formatDate,\n  capitalize,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport classnames from 'classnames';\nimport * as d3 from 'd3';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport equal from 'fast-deep-equal';\nimport React, {useState, useEffect, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction TimeSeries({timeseries, dates, chartType, isUniform, isLog}) {\n  const {t} = useTranslation();\n  const refs = useRef([]);\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const [highlightedDate, setHighlightedDate] = useState();\n\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n\n  useEffect(() => {\n    const {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // Margins\n    const margin = {top: 15, right: 35, bottom: 25, left: 25};\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const T = dates.length;\n    const yBufferTop = 1.2;\n    const yBufferBottom = 1.1;\n\n    const xScale = d3\n      .scaleTime()\n      .clamp(true)\n      .domain([new Date(dates[0]), new Date(dates[T - 1])])\n      .range([margin.left, chartRight]);\n\n    // Number of x-axis ticks\n    const numTicksX = width < 480 ? 4 : 7;\n\n    const xAxis = (g) =>\n      g.attr('class', 'x-axis').call(\n        d3\n          .axisBottom(xScale)\n          .ticks(numTicksX)\n          .tickFormat((date) => formatDate(date, 'dd MMM'))\n      );\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2')\n        .call(d3.axisBottom(xScale).tickValues([]).tickSize(0))\n        .select('.domain')\n        .style('transform', `translateY(${yScale(0)}px)`);\n\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n      else g.select('.domain').attr('opacity', 0);\n    };\n\n    const yAxis = (g, yScale) =>\n      g\n        .attr('class', 'y-axis')\n        .call(d3.axisRight(yScale).ticks(4, '0~s').tickPadding(4));\n\n    const uniformScaleMin = d3.min(dates, (date) =>\n      getStatistic(timeseries[date], chartType, 'active')\n    );\n\n    const uniformScaleMax = d3.max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], chartType, 'confirmed'),\n        getStatistic(timeseries[date], chartType, 'recovered'),\n        getStatistic(timeseries[date], chartType, 'deceased')\n      )\n    );\n\n    const yScaleUniformLinear = d3\n      .scaleLinear()\n      .clamp(true)\n      .domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const yScaleUniformLog = d3\n      .scaleLog()\n      .clamp(true)\n      .domain([\n        Math.max(1, uniformScaleMin),\n        Math.max(10, yBufferTop * uniformScaleMax),\n      ])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const generateYScale = (statistic) => {\n      if (isUniform && isLog && statistic !== 'tested') return yScaleUniformLog;\n\n      if (isUniform && statistic !== 'tested') return yScaleUniformLinear;\n\n      if (isLog)\n        return d3\n          .scaleLog()\n          .clamp(true)\n          .domain([\n            Math.max(\n              1,\n              d3.min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n            Math.max(\n              10,\n              yBufferTop *\n                d3.max(dates, (date) =>\n                  getStatistic(timeseries[date], chartType, statistic)\n                )\n            ),\n          ])\n          .nice(4)\n          .range([chartBottom, margin.top]);\n\n      return d3\n        .scaleLinear()\n        .clamp(true)\n        .domain([\n          yBufferBottom *\n            Math.min(\n              0,\n              d3.min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n          Math.max(\n            1,\n            yBufferTop *\n              d3.max(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n          ),\n        ])\n        .nice(4)\n        .range([chartBottom, margin.top]);\n    };\n\n    function mousemove() {\n      const xm = d3.mouse(this)[0];\n      const date = xScale.invert(xm);\n      const bisectDate = d3.bisector((date) => new Date(date)).left;\n      const index = bisectDate(dates, date, 1);\n      setHighlightedDate(dates[index]);\n    }\n\n    function mouseout() {\n      setHighlightedDate(dates[T - 1]);\n    }\n\n    /* Begin drawing charts */\n    refs.current.forEach((ref, i) => {\n      const svg = d3.select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      const statistic = TIMESERIES_STATISTICS[i];\n      const yScale = generateYScale(statistic);\n      const color = COLORS[statistic];\n\n      /* X axis */\n      svg\n        .select('.x-axis')\n        .style('transform', `translateY(${chartBottom}px)`)\n        .transition(t)\n        .call(xAxis);\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n\n      /* Y axis */\n      svg\n        .select('.y-axis')\n        .style('transform', `translateX(${chartRight}px)`)\n        .transition(t)\n        .call(yAxis, yScale);\n\n      /* Path dots */\n      svg\n        .selectAll('circle')\n        .data(dates, (date) => date)\n        .join((enter) =>\n          enter\n            .append('circle')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('r', 2)\n            .attr('cy', chartBottom)\n            .attr('cx', (date) => xScale(new Date(date)))\n        )\n        .transition(t)\n        .attr('cx', (date) => xScale(new Date(date)))\n        .attr('cy', (date) =>\n          yScale(getStatistic(timeseries[date], chartType, statistic))\n        );\n\n      if (chartType === 'total') {\n        svg\n          .selectAll('.stem')\n          .transition(t)\n          .attr('y1', yScale(0))\n          .attr('y2', yScale(0))\n          .remove();\n\n        const line = d3\n          .line()\n          .curve(d3.curveMonotoneX)\n          .x((date) => xScale(new Date(date)))\n          .y((date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n\n        let pathLength;\n        svg\n          .selectAll('.trend')\n          .data([dates])\n          .join(\n            (enter) =>\n              enter\n                .append('path')\n                .attr('class', 'trend')\n                .attr('fill', 'none')\n                .attr('stroke', color + '50')\n                .attr('stroke-width', 4)\n                .attr('d', line)\n                .attr('stroke-dasharray', function () {\n                  return (pathLength = this.getTotalLength());\n                })\n                .call((enter) =>\n                  enter\n                    .attr('stroke-dashoffset', pathLength)\n                    .transition(t)\n                    .attr('stroke-dashoffset', 0)\n                ),\n            (update) =>\n              update\n                .attr('stroke-dasharray', null)\n                .transition(t)\n                .attrTween('d', function (date) {\n                  const previous = d3.select(this).attr('d');\n                  const current = line(date);\n                  return interpolatePath(previous, current);\n                })\n          );\n      } else {\n        /* DAILY TRENDS */\n        svg.selectAll('.trend').remove();\n\n        svg\n          .selectAll('.stem')\n          .data(dates, (date) => date)\n          .join((enter) =>\n            enter\n              .append('line')\n              .attr('class', 'stem')\n              .style('stroke', color + '99')\n              .style('stroke-width', 4)\n              .attr('x1', (date) => xScale(new Date(date)))\n              .attr('y1', chartBottom)\n              .attr('x2', (date) => xScale(new Date(date)))\n              .attr('y2', chartBottom)\n          )\n          .transition(t)\n          .attr('x1', (date) => xScale(new Date(date)))\n          .attr('y1', yScale(0))\n          .attr('x2', (date) => xScale(new Date(date)))\n          .attr('y2', (date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n      }\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg\n        .on('mousemove', mousemove)\n        .on('touchmove', mousemove)\n        .on('mouseout', mouseout)\n        .on('touchend', mouseout);\n    });\n  }, [chartType, dimensions, isUniform, isLog, timeseries, dates]);\n\n  useEffect(() => {\n    refs.current.forEach((ref) => {\n      const svg = d3.select(ref);\n      svg\n        .selectAll('circle')\n        .attr('r', (date) => (date === highlightedDate ? 4 : 2));\n    });\n  }, [highlightedDate]);\n\n  return (\n    <React.Fragment>\n      <div className=\"TimeSeries\">\n        {TIMESERIES_STATISTICS.map((statistic, index) => (\n          <div\n            key={statistic}\n            className={classnames('svg-parent', `is-${statistic}`)}\n            ref={wrapperRef}\n          >\n            {highlightedDate && (\n              <div className={classnames('stats', `is-${statistic}`)}>\n                <h5 className=\"title\">{capitalize(t(statistic))}</h5>\n                <h5 className=\"title\">\n                  {formatDate(highlightedDate, 'dd MMMM')}\n                </h5>\n                <div className=\"stats-bottom\">\n                  <h2>\n                    {formatNumber(\n                      getStatistic(\n                        timeseries?.[highlightedDate],\n                        chartType,\n                        statistic\n                      )\n                    )}\n                  </h2>\n                  {/* <h6>Delta</h6>*/}\n                </div>\n              </div>\n            )}\n            <svg\n              ref={(element) => {\n                refs.current[index] = element;\n              }}\n              preserveAspectRatio=\"xMidYMid meet\"\n            >\n              <g className=\"x-axis\" />\n              <g className=\"x-axis2\" />\n              <g className=\"y-axis\" />\n            </svg>\n          </div>\n        ))}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  }\n  if (!equal(currProps.isUniform, prevProps.isUniform)) {\n    return false;\n  }\n  if (!equal(currProps.isLog, prevProps.isLog)) {\n    return false;\n  }\n  if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  }\n  if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(TimeSeries, isEqual);\n","import TimeSeries from './timeseries';\n\nimport {STATE_NAMES, TIMESERIES_OPTIONS} from '../constants';\nimport {getIndiaYesterdayISO} from '../utils/commonfunctions';\n\nimport 'intersection-observer';\n\nimport {PinIcon, IssueOpenedIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport {formatISO, sub} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useMemo, useRef, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useIsVisible} from 'react-is-visible';\nimport {useLocalStorage} from 'react-use';\n\nfunction TimeSeriesExplorer({\n  timeseries,\n  date: timelineDate,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  stateCodes,\n}) {\n  const {t} = useTranslation();\n  const [timeseriesOption, setTimeseriesOption] = useState(\n    TIMESERIES_OPTIONS.MONTH\n  );\n  const [chartType, setChartType] = useLocalStorage('chartType', 'total');\n  const [isUniform, setIsUniform] = useLocalStorage('isUniform', true);\n  const [isLog, setIsLog] = useLocalStorage('isLog', false);\n  const explorerElement = useRef();\n  const isVisible = useIsVisible(explorerElement, {once: true});\n\n  const dates = useMemo(() => {\n    const today = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= today\n    );\n\n    if (timeseriesOption === TIMESERIES_OPTIONS.TWO_WEEKS) {\n      const cutOffDate = formatISO(sub(new Date(today), {weeks: 2}), {\n        representation: 'date',\n      });\n      return pastDates.filter((date) => date >= cutOffDate);\n    } else if (timeseriesOption === TIMESERIES_OPTIONS.MONTH) {\n      const cutOffDate = formatISO(sub(new Date(today), {months: 1}), {\n        representation: 'date',\n      });\n      return pastDates.filter((date) => date >= cutOffDate);\n    }\n    return pastDates;\n  }, [timeseries, timelineDate, timeseriesOption]);\n\n  const handleChange = ({target}) => {\n    setRegionHighlighted({\n      stateCode: target.value,\n      districtName: null,\n    });\n  };\n\n  return (\n    <div\n      className={classnames('TimeSeriesExplorer', {\n        stickied: anchor === 'timeseries',\n      })}\n      style={{display: anchor === 'mapexplorer' ? 'none' : ''}}\n      ref={explorerElement}\n    >\n      <div className=\"timeseries-header\">\n        <div\n          className={classnames('anchor', {\n            stickied: anchor === 'timeseries',\n          })}\n          onClick={() => {\n            setAnchor(anchor === 'timeseries' ? null : 'timeseries');\n          }}\n        >\n          <PinIcon />\n        </div>\n\n        <h1>{t('Spread Trends')}</h1>\n        <div className=\"tabs\">\n          <div\n            className={`tab ${chartType === 'total' ? 'focused' : ''}`}\n            onClick={() => {\n              setChartType('total');\n            }}\n          >\n            <h4>{t('Cumulative')}</h4>\n          </div>\n          <div\n            className={`tab ${chartType === 'delta' ? 'focused' : ''}`}\n            onClick={() => {\n              setChartType('delta');\n              setIsLog(false);\n            }}\n          >\n            <h4>{t('Daily')}</h4>\n          </div>\n        </div>\n\n        <div className=\"scale-modes\">\n          <label className=\"main\">{t('Scale Modes')}</label>\n          <div className=\"timeseries-mode\">\n            <label htmlFor=\"timeseries-mode\">{t('Uniform')}</label>\n            <input\n              id=\"timeseries-mode\"\n              type=\"checkbox\"\n              className=\"switch\"\n              checked={isUniform}\n              aria-label={t('Checked by default to scale uniformly.')}\n              onChange={() => {\n                setIsUniform(!isUniform);\n              }}\n            />\n          </div>\n          <div\n            className={`timeseries-logmode ${\n              chartType !== 'total' ? 'disabled' : ''\n            }`}\n          >\n            <label htmlFor=\"timeseries-logmode\">{t('Logarithmic')}</label>\n            <input\n              id=\"timeseries-logmode\"\n              type=\"checkbox\"\n              checked={chartType === 'total' && isLog}\n              className=\"switch\"\n              disabled={chartType !== 'total'}\n              onChange={() => {\n                setIsLog(!isLog);\n              }}\n            />\n          </div>\n        </div>\n\n        {stateCodes && (\n          <div className=\"trends-state-name\">\n            <select value={regionHighlighted.stateCode} onChange={handleChange}>\n              {stateCodes.map((stateCode) => {\n                return (\n                  <option value={stateCode} key={stateCode}>\n                    {stateCode === 'TT'\n                      ? t('All States')\n                      : t(STATE_NAMES[stateCode])}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n        )}\n      </div>\n\n      {isVisible && (\n        <TimeSeries\n          stateCode={regionHighlighted.stateCode}\n          {...{timeseries, dates, chartType, isUniform, isLog}}\n        />\n      )}\n\n      <div className=\"pills\">\n        {Object.values(TIMESERIES_OPTIONS).map((option) => (\n          <button\n            key={option}\n            type=\"button\"\n            className={classnames({selected: timeseriesOption === option})}\n            onClick={() => setTimeseriesOption(option)}\n          >\n            {t(option)}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"alert\">\n        <IssueOpenedIcon size={24} />\n        <div className=\"alert-right\">\n          {t('Tested chart is independent of uniform scaling')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  }\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  if (!equal(currProps.anchor, prevProps.anchor)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(TimeSeriesExplorer, isEqual);\n","import {COLORS, D3_TRANSITION_DURATION, NUM_BARS_STATEPAGE} from '../constants';\nimport {\n  formatDate,\n  getIndiaYesterdayISO,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef} from 'react';\n\nconst getDeltaStatistic = (data, statistic) => {\n  return getStatistic(data, 'delta', statistic);\n};\n\nconst [width, height] = [250, 250];\nconst margin = {top: 50, right: 0, bottom: 50, left: 0};\n\nfunction DeltaBarGraph({timeseries, statistic}) {\n  const svgRef = useRef();\n\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaYesterdayISO()\n  );\n  const dates = pastDates.slice(-NUM_BARS_STATEPAGE);\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const r = 5;\n\n    // const formatTime = d3.timeFormat('%e %b');\n    const xScale = d3\n      .scaleBand()\n      .domain(dates)\n      .range([margin.left, chartRight])\n      .paddingInner(0.33);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        Math.min(\n          0,\n          d3.min(dates, (date) =>\n            getDeltaStatistic(timeseries[date], statistic)\n          )\n        ),\n        Math.max(\n          1,\n          d3.max(dates, (date) =>\n            getDeltaStatistic(timeseries[date], statistic)\n          )\n        ),\n      ])\n      .range([chartBottom, margin.top]);\n\n    const xAxis = d3\n      .axisBottom(xScale)\n      .tickSize(0)\n      .tickFormat((date) => formatDate(date, 'dd MMM'));\n\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n    svg\n      .select('.x-axis')\n      .transition(t)\n      .style('transform', `translateY(${yScale(0)}px)`)\n      .call(xAxis)\n      .on('start', () => svg.select('.domain').remove())\n      .selectAll('text')\n      .attr('y', 0)\n      .attr('dy', (date, i) =>\n        getDeltaStatistic(timeseries[date], statistic) < 0 ? '-1em' : '1.5em'\n      )\n      .style('text-anchor', 'middle')\n      .attr('fill', COLORS[statistic]);\n\n    svg\n      .selectAll('.bar')\n      .data(dates)\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('class', 'bar')\n          .attr('d', (date) =>\n            roundedBar(xScale(date), yScale(0), xScale.bandwidth(), 0, r)\n          )\n      )\n      .transition(t)\n      .attr('d', (date) =>\n        roundedBar(\n          xScale(date),\n          yScale(0),\n          xScale.bandwidth(),\n          yScale(0) - yScale(getDeltaStatistic(timeseries[date], statistic)),\n          r\n        )\n      )\n      .attr('fill', (date, i) => {\n        return i < date.length - 1\n          ? COLORS[statistic] + '90'\n          : COLORS[statistic];\n      });\n\n    const textSelection = svg\n      .selectAll('.label')\n      .data(dates)\n      .join('text')\n      .attr('class', 'label')\n      .attr('x', (date) => xScale(date) + xScale.bandwidth() / 2)\n      .text((date) => getDeltaStatistic(timeseries[date], statistic));\n\n    textSelection\n      .transition(t)\n      .attr('fill', COLORS[statistic])\n      .attr('y', (date) => {\n        const val = getDeltaStatistic(timeseries[date], statistic);\n        return yScale(val) + (val < 0 ? 15 : -6);\n      });\n\n    textSelection\n      .append('tspan')\n      .attr(\n        'dy',\n        (date) =>\n          `${getDeltaStatistic(timeseries[date], statistic) < 0 ? 1.2 : -1.2}em`\n      )\n      .attr('x', (date) => xScale(date) + xScale.bandwidth() / 2)\n      .text((date, i) => {\n        if (i === 0) return '';\n        const prevVal = getDeltaStatistic(timeseries[dates[i - 1]], statistic);\n        const val = getDeltaStatistic(timeseries[date], statistic);\n        return prevVal\n          ? d3.format('+.1~%')((val - prevVal) / Math.abs(prevVal))\n          : '';\n      })\n      .transition(t)\n      .attr('fill', COLORS[statistic] + '90');\n  }, [dates, timeseries, statistic]);\n\n  return (\n    <div className=\"DeltaBarGraph\">\n      <svg\n        ref={svgRef}\n        width=\"250\"\n        height=\"250\"\n        viewBox=\"0 0 250 250\"\n        preserveAspectRatio=\"xMidYMid meet\"\n      >\n        <g\n          className=\"x-axis\"\n          transform={`translate(0, ${height - margin.bottom})`}\n        />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.statistic, currProps.statistic)) return false;\n  return true;\n};\n\nexport default React.memo(DeltaBarGraph, isEqual);\n\nfunction roundedBar(x, y, w, h, r) {\n  r = Math.sign(h) * Math.min(Math.abs(h), r);\n  const paths = [\n    `M ${x} ${y}`,\n    `v ${-h + r}`,\n    `q 0 ${-r} ${Math.abs(r)} ${-r}`,\n    `h ${w - 2 * Math.abs(r)}`,\n    `q ${Math.abs(r)} 0 ${Math.abs(r)} ${r}`,\n    `v ${h - r}`,\n    'Z',\n  ];\n  return paths.join(' ');\n}\n","import React from 'react';\nimport * as Icon from 'react-feather';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        <span\n          data-tip={formula}\n          data-event=\"touchstart mouseover\"\n          data-event-off=\"mouseleave\"\n          data-for=\"stateMeta\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <Icon.Info />\n        </span>\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`India has ${total} CPM`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","import StateMetaCard from './statemetacard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaDate,\n} from '../utils/commonfunctions';\n\nimport {format, sub} from 'date-fns';\nimport React from 'react';\nimport * as Icon from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nfunction StateMeta({stateCode, data, timeseries, population}) {\n  const confirmed = getStatistic(data, 'total', 'confirmed');\n  const active = getStatistic(data, 'total', 'active');\n  const deceased = getStatistic(data, 'total', 'deceased');\n  const recovered = getStatistic(data, 'total', 'recovered');\n  const tested = getStatistic(data, 'total', 'tested');\n\n  const indiaDate = format(getIndiaDate(), 'yyyy-MM-dd');\n  const prevWeekDate = format(sub(getIndiaDate(), {weeks: 1}), 'yyyy-MM-dd');\n\n  const prevWeekConfirmed = getStatistic(\n    timeseries[prevWeekDate],\n    'total',\n    'confirmed'\n  );\n\n  const confirmedPerMillion = (confirmed / population) * 1000000;\n  const testPerMillion = (tested / population) * 1000000;\n  const totalConfirmedPerMillion = (confirmed / 1332900000) * 1000000;\n\n  const recoveryPercent = (recovered / confirmed) * 100;\n  const activePercent = (active / confirmed) * 100;\n  const deathPercent = (deceased / confirmed) * 100;\n\n  const growthRate =\n    ((confirmed - prevWeekConfirmed) / prevWeekConfirmed) * 100;\n\n  return (\n    <React.Fragment>\n      <div className=\"StateMeta population\">\n        <ReactTooltip\n          place=\"top\"\n          type=\"dark\"\n          effect=\"solid\"\n          multiline={true}\n          scrollHide={true}\n          globalEventOff=\"click\"\n          id=\"stateMeta\"\n        />\n        <div className=\"meta-item population fadeInUp\">\n          <h3>Population</h3>\n          <h1>{formatNumber(population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Icon.Compass />\n          <div className=\"alert-right\">\n            Based on 2019 population projection by NCP{' '}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={confirmedPerMillion.toFixed(2)}\n          total={totalConfirmedPerMillion.toFixed(2)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ${Math.round(\n              confirmedPerMillion\n            )} out of every 1 million people in ${\n            STATE_NAMES[stateCode]\n          } have tested positive for the virus.\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active'}\n          statistic={`${activePercent.toFixed(2)}%`}\n          formula={'(active / confirmed) * 100'}\n          description={`For every 100 confirmed cases, ${activePercent.toFixed(\n            0\n          )} are currently infected.`}\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Rate'}\n          statistic={`${recoveryPercent.toFixed(2)}%`}\n          formula={'(recovered / confirmed) * 100'}\n          description={`For every 100 confirmed cases,\n            ${Math.round(\n              recoveryPercent.toFixed(0)\n            )} have recovered from the virus.`}\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Mortality Rate'}\n          statistic={`${deathPercent.toFixed(2)}%`}\n          formula={'(deceased / confirmed) * 100'}\n          description={`For every 100 confirmed cases,\n            ${Math.round(\n              deathPercent.toFixed(0)\n            )} have unfortunately passed away from the virus.`}\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={growthRate > 0 ? `${Math.round(growthRate / 7)}%` : '-'}\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${format(new Date(prevWeekDate), 'dd MMM')} - ${format(\n            new Date(indiaDate),\n            'dd MMM'\n          )}`}\n          description={`In the last one week, the number of new infections has grown by an average of ${Math.round(\n            growthRate / 7\n          )}% every day.`}\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`≈ ${Math.round(testPerMillion)}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={`As of ${formatLastUpdated(data.meta.tested.last_updated)} ago`}\n          description={`For every 1 million people in ${STATE_NAMES[stateCode]},\n            ${Math.round(testPerMillion)} people were tested.`}\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default StateMeta;\n","import DeltaBarGraph from './deltabargraph';\nimport Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport StateMeta from './statemeta';\nimport TimeSeriesExplorer from './timeseriesexplorer';\n\nimport {\n  MAP_META,\n  NUM_BARS_STATEPAGE,\n  STATE_NAMES,\n  STATE_POPULATIONS,\n} from '../constants';\nimport {\n  fetcher,\n  formatDate,\n  formatNumber,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport Breadcrumb from '@primer/components/lib/Breadcrumb';\nimport Dropdown from '@primer/components/lib/Dropdown';\nimport anime from 'animejs';\nimport React, {useState, useMemo} from 'react';\nimport * as Icon from 'react-feather';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {Link, useParams, Redirect} from 'react-router-dom';\nimport {useMeasure, useEffectOnce} from 'react-use';\nimport useSWR from 'swr';\n\nfunction PureBreadcrumbs({stateName, stateCode, stateCodes}) {\n  const {t} = useTranslation();\n\n  return (\n    <div className=\"breadcrumb\">\n      <Breadcrumb>\n        <Breadcrumb.Item href=\"/\">{t('Home')}</Breadcrumb.Item>\n        <Dropdown direction=\"w\">\n          <summary>\n            <Breadcrumb.Item href={`${stateCode}`} selected>\n              {t(stateName)}\n            </Breadcrumb.Item>\n            <Dropdown.Caret className=\"caret\" />\n          </summary>\n          <Dropdown.Menu direction=\"se\">\n            {stateCodes.map((stateCode) => (\n              <Dropdown.Item key={stateCode} className=\"item\">\n                <Link to={`${stateCode}`}>{t(STATE_NAMES[stateCode])}</Link>\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n      </Breadcrumb>\n    </div>\n  );\n}\n\nconst Breadcrumbs = React.memo(PureBreadcrumbs);\n\nfunction State(props) {\n  const stateCode = useParams().stateCode.toUpperCase();\n  const stateName = STATE_NAMES[stateCode];\n\n  const [mapStatistic, setMapStatistic] = useState('confirmed');\n  const [mapSwitcher, {width}] = useMeasure();\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    stateCode: stateCode,\n    districtName: null,\n  });\n\n  const {t} = useTranslation();\n\n  useEffectOnce(() => {\n    anime({\n      targets: '.highlight',\n      duration: 200,\n      delay: 3000,\n      translateX:\n        mapStatistic === 'confirmed'\n          ? `${width * 0}px`\n          : mapStatistic === 'active'\n          ? `${width * 0.25}px`\n          : mapStatistic === 'recovered'\n          ? `${width * 0.5}px`\n          : mapStatistic === 'deceased'\n          ? `${width * 0.75}px`\n          : '0px',\n      easing: 'spring(1, 80, 90, 10)',\n      opacity: 1,\n    });\n  });\n\n  const {data: timeseries} = useSWR(\n    'https://api.covid19india.org/v3/min/timeseries.min.json',\n    fetcher,\n    {\n      suspense: true,\n      revalidateOnFocus: false,\n    }\n  );\n\n  const {data} = useSWR(\n    'https://api.covid19india.org/v3/min/data.min.json',\n    fetcher,\n    {\n      suspense: true,\n      revalidateOnMount: true,\n      refreshInterval: 100000,\n      revalidateOnFocus: false,\n    }\n  );\n\n  const toggleShowAllDistricts = () => {\n    setShowAllDistricts(!showAllDistricts);\n  };\n\n  const handleSort = (districtNameA, districtNameB) => {\n    const districtA = data[stateCode].districts[districtNameA];\n    const districtB = data[stateCode].districts[districtNameB];\n    return districtB[mapStatistic] - districtA[mapStatistic];\n  };\n\n  const gridRowCount = useMemo(() => {\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount = data[stateCode]?.districts\n      ? Object.keys(data[stateCode].districts).length\n      : 0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  }, [data, stateCode]);\n\n  if (!stateName) {\n    return <Redirect to=\"/\" />;\n  } else {\n    return (\n      <React.Fragment>\n        <Helmet>\n          <title>\n            Coronavirus Outbreak in {STATE_NAMES[stateCode]} - covid19india.org\n          </title>\n          <meta\n            name=\"title\"\n            content={`Coronavirus Outbreak in ${STATE_NAMES[stateCode]}: Latest Map and Case Count`}\n          />\n        </Helmet>\n\n        <div className=\"State\">\n          <div className=\"state-left\">\n            <Breadcrumbs\n              {...{stateCode, stateName}}\n              stateCodes={Object.keys(data).filter(\n                (stateCode) =>\n                  stateCode !== 'TT' &&\n                  Object.keys(MAP_META).includes(stateCode)\n              )}\n            />\n\n            <div className=\"header\">\n              <div className=\"header-left\">\n                <h1>{t(stateName)}</h1>\n                <h5>{`Last Updated on ${formatDate(\n                  data[stateCode].meta.last_updated,\n                  'dd MMM, p'\n                )}`}</h5>\n              </div>\n\n              <div className=\"header-right\">\n                <h5>{t('Tested')}</h5>\n                {data[stateCode]?.total?.tested && (\n                  <React.Fragment>\n                    <h2>{formatNumber(data[stateCode].total.tested)}</h2>\n                    <h5 className=\"timestamp\">\n                      {`As of ${formatDate(\n                        data[stateCode].meta.tested.last_updated,\n                        'dd MMMM'\n                      )}`}\n                    </h5>\n                    <h5>\n                      {'per '}\n                      <a\n                        href={data[stateCode].meta.tested.source}\n                        target=\"_noblank\"\n                      >\n                        source\n                      </a>\n                    </h5>\n                  </React.Fragment>\n                )}\n              </div>\n            </div>\n\n            <div className=\"map-switcher\" ref={mapSwitcher}>\n              <div\n                className={`highlight ${mapStatistic}`}\n                style={{\n                  transform: `translateX(${width * 0}px)`,\n                  opacity: 0,\n                }}\n              ></div>\n              <div\n                className=\"clickable\"\n                onClick={() => {\n                  setMapStatistic('confirmed');\n                  anime({\n                    targets: '.highlight',\n                    translateX: `${width * 0}px`,\n                    easing: 'spring(1, 80, 90, 10)',\n                  });\n                }}\n              ></div>\n              <div\n                className=\"clickable\"\n                onClick={() => {\n                  setMapStatistic('active');\n                  anime({\n                    targets: '.highlight',\n                    translateX: `${width * 0.25}px`,\n                    easing: 'spring(1, 80, 90, 10)',\n                  });\n                }}\n              ></div>\n              <div\n                className=\"clickable\"\n                onClick={() => {\n                  setMapStatistic('recovered');\n                  anime({\n                    targets: '.highlight',\n                    translateX: `${width * 0.5}px`,\n                    easing: 'spring(1, 80, 90, 10)',\n                  });\n                }}\n              ></div>\n              <div\n                className=\"clickable\"\n                onClick={() => {\n                  setMapStatistic('deceased');\n                  anime({\n                    targets: '.highlight',\n                    translateX: `${width * 0.75}px`,\n                    easing: 'spring(1, 80, 90, 10)',\n                  });\n                }}\n              ></div>\n            </div>\n\n            <Level data={data[stateCode]} />\n            <Minigraph timeseries={timeseries[stateCode]} />\n\n            <MapExplorer\n              isCountryLoaded={false}\n              {...{\n                stateCode,\n                data,\n                regionHighlighted,\n                setRegionHighlighted,\n                mapStatistic,\n                setMapStatistic,\n              }}\n            />\n\n            {data && (\n              <StateMeta\n                {...{\n                  stateCode,\n                  data: data[stateCode],\n                  timeseries: timeseries[stateCode],\n                  population: STATE_POPULATIONS[stateCode],\n                }}\n              />\n            )}\n          </div>\n\n          <div className=\"state-right\">\n            <React.Fragment>\n              <div\n                className=\"district-bar\"\n                style={!showAllDistricts ? {display: 'flex'} : {}}\n              >\n                <div\n                  className=\"district-bar-left fadeInUp\"\n                  style={{animationDelay: '0.6s'}}\n                >\n                  <h2 className={mapStatistic}>Top districts</h2>\n                  <div\n                    className={`districts ${showAllDistricts ? 'is-grid' : ''}`}\n                    style={\n                      showAllDistricts\n                        ? {gridTemplateRows: `repeat(${gridRowCount}, 2rem)`}\n                        : {}\n                    }\n                  >\n                    {Object.keys(data[stateCode].districts)\n                      .filter((districtName) => districtName !== 'Unknown')\n                      .sort((a, b) => handleSort(a, b))\n                      .slice(0, showAllDistricts ? undefined : 5)\n                      .map((districtName) => {\n                        return (\n                          <div key={districtName} className=\"district\">\n                            <h2>\n                              {formatNumber(\n                                getStatistic(\n                                  data[stateCode].districts[districtName],\n                                  'total',\n                                  mapStatistic\n                                )\n                              )}\n                            </h2>\n                            <h5>{t(districtName)}</h5>\n                            {mapStatistic !== 'active' && (\n                              <div className=\"delta\">\n                                <Icon.ArrowUp className={mapStatistic} />\n                                <h6 className={mapStatistic}>\n                                  {formatNumber(\n                                    getStatistic(\n                                      data[stateCode].districts[districtName],\n                                      'delta',\n                                      mapStatistic\n                                    )\n                                  )}\n                                </h6>\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                  </div>\n\n                  {Object.keys(data[stateCode].districts).length > 5 && (\n                    <button className=\"button\" onClick={toggleShowAllDistricts}>\n                      {showAllDistricts ? `View less` : `View all`}\n                    </button>\n                  )}\n                </div>\n\n                <div className=\"district-bar-right\">\n                  {(mapStatistic === 'confirmed' ||\n                    mapStatistic === 'deceased') && (\n                    <div className=\"happy-sign\">\n                      {Object.keys(timeseries[stateCode])\n                        .slice(-NUM_BARS_STATEPAGE)\n                        .every(\n                          (date) =>\n                            getStatistic(\n                              timeseries[stateCode][date],\n                              'delta',\n                              mapStatistic\n                            ) === 0\n                        ) && (\n                        <div\n                          className={`alert ${\n                            mapStatistic === 'confirmed' ? 'is-green' : ''\n                          }`}\n                        >\n                          <Icon.Smile />\n                          <div className=\"alert-right\">\n                            No new {mapStatistic} cases in the past five days\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  <DeltaBarGraph\n                    timeseries={timeseries[stateCode]}\n                    statistic={mapStatistic}\n                  />\n                </div>\n              </div>\n\n              <TimeSeriesExplorer\n                timeseries={timeseries[stateCode]}\n                {...{regionHighlighted, setRegionHighlighted}}\n              />\n            </React.Fragment>\n          </div>\n        </div>\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default React.memo(State);\n"],"sourceRoot":""}