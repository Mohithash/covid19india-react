{"version":3,"sources":["components/search.js","components/row.js","components/table.js","components/updates.js","components/home.js"],"names":["engine","Bloodhound","initialize","local","STATE_CODES_ARRAY","queryTokenizer","tokenizers","whitespace","datumTokenizer","obj","districtEngine","limit","indexRemote","remote","url","transform","response","districts","Object","keys","map","stateName","districtData","districtName","push","district","state","essentialsEngine","resources","essentialSuggestions","locationSuggestions","React","memo","districtZones","useState","searchValue","setSearchValue","expand","setExpand","results","setResults","searchInput","useRef","t","useTranslation","handleSearch","useCallback","search","datums","result","index","stateObj","name","type","route","code","slice","districtObj","STATE_CODES_REVERSE","essentialsObj","nameoftheorganisation","category","website","contact","description","descriptionandorserviceprovided","city","phonenumber","setNativeValue","element","value","valueSetter","getOwnPropertyDescriptor","set","prototype","getPrototypeOf","prototypeValueSetter","call","useDebounce","className","ref","onFocus","event","onBlur","onChange","target","id","length","onClick","key","to","STATE_CODES","classnames","zone","toLowerCase","size","href","match","Fragment","onMouseDown","preventDefault","current","dispatchEvent","Event","bubbles","suggestion","useBreakpoint","createBreakpoint","XL","L","S","StateCell","statistic","ArrowUp","useMemo","formatNumber","DistrictHeaderCell","handleSort","sortData","breakpoint","title","capitalize","abbreviate","style","display","sortColumn","isAscending","DistrictCell","delta","DistrictRow","regionHighlighted","onHighlightDistrict","sortedDistricts","onMouseEnter","data-for","data-tip","notes","data-event","data-event-off","e","stopPropagation","DISTRICT_ROW_STATISTICS","prevProps","currProps","equal","zones","onHighlightState","setSortedDistricts","showDistricts","setShowDistricts","useLocalStorage","setSortData","history","useHistory","Chevron","rotateRightDown","rotateDownRight","_onHighlightState","doSort","sorted","sort","district1","district2","parseInt","localeCompare","forEach","newSortData","assign","useEffectOnce","statecode","statenotes","STATE_ROW_STATISTICS","colSpan","paddingBottom","isNaN","Date","parse","formatDate","lastupdatedtime","formatLastUpdated","Unknown","align","place","effect","multiline","scrollHide","globalEventOff","StateHeaderCell","states","filter","sortedStates","setSortedStates","FineprintTop","animationDelay","color","FineprintBottom","s","confirmed","newSortedStates","x","y","height","newDate","currentDate","Updates","props","updates","setUpdates","axios","get","then","data","catch","err","console","log","useLayoutEffect","format","reverse","activity","update","replace","activityDate","timestamp","getDate","formatDistance","dangerouslySetInnerHTML","__html","Home","setStates","stateDistrictWiseData","setStateDistrictWiseData","setDistrictZones","stateTestData","setStateTestData","lastUpdated","setLastUpdated","timeseries","setTimeseries","fetched","setFetched","setRegionHighlighted","showUpdates","setShowUpdates","anchor","setAnchor","mapOption","setMapOption","lastViewedLog","setLastViewedLog","newUpdate","setNewUpdate","Bell","BellOff","getStates","lastTimestamp","toString","a","Promise","all","statesDailyResponse","zonesResponse","stateDistrictWiseResponse","statewise","parseDistrictZones","ts","parseStateTimeseries","preprocessTimeseries","cases_time_series","testTs","parseStateTestTimeseries","states_tested_data","parseTotalTestTimeseries","tested","tsMerged","mergeTimeseries","testData","parseStateTestData","totalTest","source","totaltested","totalsamplestested","updatedon","updatetimestamp","split","Helmet","content","formatDateAbsolute","summary","mapName","activeStateCode"],"mappings":"0UAcMA,EAAS,IAAIC,IAAW,CAC5BC,YAAY,EACZC,MAAOC,IACPC,eAAgBJ,IAAWK,WAAWC,WACtCC,eAAgBP,IAAWK,WAAWG,IAAIF,WAAW,UAGjDG,EAAiB,IAAIT,IAAW,CACpCC,YAAY,EACZS,MAAO,EACPN,eAAgBJ,IAAWK,WAAWC,WACtCC,eAAgBP,IAAWK,WAAWG,IAAIF,WAAW,YACrDK,aAAa,EACbC,OAAQ,CACNC,IAAK,wDACLC,UAAW,SAAUC,GACnB,IAAMC,EAAY,GAQlB,OAPAC,OAAOC,KAAKH,GAAUI,KAAI,SAACC,GACzB,IAAMC,EAAeN,EAASK,GAAWC,aAIzC,OAHAJ,OAAOC,KAAKG,GAAcF,KAAI,SAACG,GAC7B,OAAON,EAAUO,KAAK,CAACC,SAAUF,EAAcG,MAAOL,OAEjD,QAEFJ,MAKPU,EAAmB,IAAI1B,IAAW,CACtCC,YAAY,EACZS,MAAO,EACPN,eAAgBJ,IAAWK,WAAWC,WACtCC,eAAgBP,IAAWK,WAAWG,IAAIF,WACxC,WACA,OACA,UACA,kCACA,wBACA,SAEFK,aAAa,EACbC,OAAQ,CACNC,IAAK,wDACLC,UAAW,SAAUC,GACnB,OAAOA,EAASY,cAehBC,EAAuB,CAC3B,eACA,gBACA,8BACA,oBACA,oCAEIC,EAAsB,CAC1B,SACA,YACA,UACA,YACA,UAkTaC,UAAMC,MA/SrB,YAAkC,IAAjBC,EAAgB,EAAhBA,cAAgB,EACOC,mBAAS,IADhB,mBACxBC,EADwB,KACXC,EADW,OAEHF,oBAAS,GAFN,mBAExBG,EAFwB,KAEhBC,EAFgB,OAGDJ,mBAAS,IAHR,mBAGxBK,EAHwB,KAGfC,EAHe,KAIzBC,EAAcC,iBAAO,MACpBC,EAAKC,cAALD,EAEDE,EAAeC,uBAAY,SAACL,GAChC,IAAMF,EAAU,GA4ChBvC,EAAO+C,OAAON,GA1CD,SAACO,GACZA,EAAO5B,KAAI,SAAC6B,EAAQC,GAClB,IAAMC,EAAW,CACfC,KAAMH,EAAOG,KACbC,KAAM,QACNC,MAAOL,EAAOM,MAGhB,OADAhB,EAAQf,KAAK2B,GACN,WAmCXzC,EAAeqC,OAAON,GA/BD,SAACO,GACpBA,EAAOQ,MAAM,EAAG,GAAGpC,KAAI,SAAC6B,EAAQC,GAC9B,IAAMO,EAAc,CAClBL,KAAMH,EAAOxB,SACb4B,KAAM,WACNC,MAAOI,IAAoBT,EAAOvB,QAGpC,OADAa,EAAQf,KAAKiC,GACN,WAwBX9B,EAAiBoB,OAAON,GApBD,SAACO,GACtBA,EAAOQ,MAAM,EAAG,GAAGpC,KAAI,SAAC6B,EAAQC,GAC9B,IAAMS,EAAgB,CACpBP,KAAMH,EAAOW,sBACbP,KAAM,aACNQ,SAAUZ,EAAOY,SACjBC,QAASb,EAAOc,QAChBC,YAAaf,EAAOgB,gCACpBC,KAAMjB,EAAOiB,KACbxC,MAAOuB,EAAOvB,MACdqC,QAASd,EAAOkB,aAGlB,OADA5B,EAAQf,KAAKmC,GACN,QAETnB,EAAW,GAAD,OAAKD,SAMhB,IAcH,SAAS6B,EAAeC,EAASC,GAC/B,IAAMC,EAAcrD,OAAOsD,yBAAyBH,EAAS,SAASI,IAChEC,EAAYxD,OAAOyD,eAAeN,GAClCO,EAAuB1D,OAAOsD,yBAClCE,EACA,SACAD,IAEEF,GAAeA,IAAgBK,EACjCA,EAAqBC,KAAKR,EAASC,GAEnCC,EAAYM,KAAKR,EAASC,GAoD9B,OA3EAQ,aACE,WACM3C,EACFU,EAAaV,GAEbK,EAAW,MAGf,IACA,CAACL,IAmED,yBAAK4C,UAAU,UACb,+BAAQpC,EAAE,qCACV,yBAAKoC,UAAU,SAEf,yBAAKA,UAAU,wBACb,2BACE1B,KAAK,OACLiB,MAAOnC,EACP6C,IAAKvC,EACLwC,QAAS,SAACC,GACR5C,GAAU,IAEZ6C,OAAQ,WACN7C,GAAU,IAEZ8C,SAAU,SAACF,GACT9C,EAAe8C,EAAMG,OAAOf,UAGhC,0BAAMgB,GAAG,qBAAqBP,UAAU,uBAExC,yBAAKA,UAAS,iBACZ,kBAAC,IAAD,OAGD5C,EAAYoD,OAAS,GACpB,yBACER,UAAS,eACTS,QAAS,WACPpD,EAAe,IACfI,EAAW,MAGb,kBAAC,IAAD,QAKLD,EAAQgD,OAAS,GAChB,yBAAKR,UAAU,WACZxC,EAAQnB,KAAI,SAAC6B,EAAQC,GACwC,IAAD,EAA3D,MAAoB,UAAhBD,EAAOI,MAAoC,aAAhBJ,EAAOI,KAElC,kBAAC,IAAD,CAAMoC,IAAKvC,EAAOwC,GAAE,gBAAWzC,EAAOK,QACpC,yBAAKyB,UAAU,UACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAf,UACM9B,EAAOG,MACM,aAAhBH,EAAOI,MAAP,YACMsC,IAAY1C,EAAOK,SAE5B,yBACEyB,UAAWa,IAAW,cAAD,sCACZ3D,EAAc0D,IAAY1C,EAAOK,QACtCL,EAAOG,aAFU,aACZ,EAEJyC,KAAKC,gBAAkB,OAIhC,yBAAKf,UAAU,eACb,8BAAO,CAAC9B,EAAOK,QACf,kBAAC,IAAD,CAAuByC,KAAM,QAOnC,uBACEN,IAAKvC,EACL8C,KAAM/C,EAAOa,QACbuB,OAAO,WACPN,UAAU,oBAEV,yBAAKA,UAAU,cACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,eAAe9B,EAAOG,MACrC,yBAAK2B,UAAU,mBACZ9B,EAAOiB,MAAP,UAAkBjB,EAAOiB,KAAzB,MACAjB,EAAOvB,QAGZ,yBAAKqD,UAAU,mBACb,6BACG9B,EAAOY,SAASoC,MAAM,YACnB,gBACAhD,EAAOY,SAASoC,MAAM,+BACtB,iBACAhD,EAAOY,UAEb,kBAAC,IAAD,QAGJ,yBAAKkB,UAAU,sBAAsB9B,EAAOe,aAC5C,yBAAKe,UAAU,kBACb,kBAAC,IAAD,MACA,6BAAM9B,EAAOc,eAS1B1B,GACC,kBAAC,IAAM6D,SAAP,KACE,uBACEnB,UAAU,UACVoB,YAAa,SAACjB,GACZA,EAAMkB,iBACNhC,EAAe3B,EAAY4D,QAAS,kBACpC5D,EAAY4D,QAAQC,cAClB,IAAIC,MAAM,QAAS,CAACC,SAAS,OANnC,oIAaA,yBAAKzB,UAAU,YACb,yBAAKA,UAAU,iBACb,4BAAKpC,EAAE,eACP,yBAAKoC,UAAU,eACZlD,EAAqBT,KAAI,SAACqF,EAAYvD,GAAb,OACxB,yBAAK6B,UAAU,aAAaU,IAAKvC,GAC/B,kCACA,wBACEiD,YAAa,SAACjB,GACZA,EAAMkB,iBACNhC,EAAe3B,EAAY4D,QAASI,GACpChE,EAAY4D,QAAQC,cAClB,IAAIC,MAAM,QAAS,CAACC,SAAS,OAIhC7D,EAAE8D,UAMb,yBAAK1B,UAAU,kBACb,4BAAKpC,EAAE,cACP,yBAAKoC,UAAU,eACZjD,EAAoBV,KAAI,SAACqF,EAAYvD,GAAb,OACvB,yBAAK6B,UAAU,aAAaU,IAAKvC,GAC/B,kCACA,wBACEiD,YAAa,SAACjB,GACZA,EAAMkB,iBACNhC,EAAe3B,EAAY4D,QAASI,GACpChE,EAAY4D,QAAQC,cAClB,IAAIC,MAAM,QAAS,CAACC,SAAS,OAIhC7D,EAAE8D,gB,kHCzWnBC,EAAgBC,YAAiB,CAACC,GAAI,KAAMC,EAAG,IAAKC,EAAG,MAE7D,SAASC,EAAT,GAAwC,IAApBrF,EAAmB,EAAnBA,MAAOsF,EAAY,EAAZA,UACnBC,EAAUC,mBAAQ,kBAAM,kBAAC,IAAD,QAAkB,IAEhD,OACE,4BACE,0BAAMnC,UAAWa,IAAW,QAAD,aAAgBoB,KACxCtF,EAAM,QAAD,OAASsF,IAAe,GAAKC,EAClCvF,EAAM,QAAD,OAASsF,IAAe,GAAKtF,EAAM,QAAD,OAASsF,KAEnD,0BAAMjC,UAAU,SACQ,IAArBrD,EAAMsF,GAAmB,IAAMG,YAAazF,EAAMsF,MAM3D,SAASI,EAAT,GAAgE,IAAnCC,EAAkC,EAAlCA,WAAYL,EAAsB,EAAtBA,UAAWM,EAAW,EAAXA,SAC5CC,EAAab,IACZ/D,EAAKC,cAALD,EAEP,OACE,wBAAI6C,QAAS,kBAAM6B,EAAWL,KAC5B,yBAAKjC,UAAU,mBACb,0BACEA,UAAWa,IAAW,4BAAQoB,GAA6B,MAAfO,IAC5CC,MAAOR,GAES,MAAfO,EACGP,EAAUxD,MAAM,GACD,MAAf+D,EACAE,YACEC,YAAyB,WAAdV,EAAyB,WAAaA,IAEnDrE,EAAE8E,YAAyB,WAAdT,EAAyB,WAAaA,KAEzD,yBACEW,MAAO,CACLC,QAASN,EAASO,aAAeb,EAAY,UAAY,SAG1DM,EAASQ,YACR,yBAAK/C,UAAU,aAEf,yBAAKA,UAAU,kBAoB3B,IAAMgD,EAAehG,IAAMC,MAZ3B,YAAkD,IAAvBP,EAAsB,EAAtBA,SAAUuF,EAAY,EAAZA,UACnC,OACE,4BACE,0BAAMjC,UAAWa,IAAW,QAAD,aAAgBoB,KACxCvF,EAASuG,MAAMhB,GAAa,GAAK,kBAAC,IAAD,MACjCvF,EAASuG,MAAMhB,GAAa,GAAKvF,EAASuG,MAAMhB,IAEnD,0BAAMjC,UAAU,SAASoC,YAAa1F,EAASuF,SAgErD,IAAMiB,EAAclG,IAAMC,MA/C1B,YAQI,IAPFkG,EAOC,EAPDA,kBACAzG,EAMC,EANDA,SACAC,EAKC,EALDA,MACAmE,EAIC,EAJDA,KACAsC,EAGC,EAHDA,oBACAC,EAEC,EAFDA,gBACAnH,EACC,EADDA,UAEO0B,EAAKC,cAALD,EAEP,OACE,wBACE8C,IAAKhE,EAASA,SACdsD,UAAWa,IAAW,WAAY,CAChC,kBAAmC,OAAjBsC,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBzG,YAAaA,IAEpD4G,aAAc,kBAAMF,EAAoB1G,EAAUC,KAElD,wBAAIqD,UAAWa,IAAW,MAAD,cAAOC,QAAP,IAAOA,OAAP,EAAOA,EAAMA,QACpC,yBAAKd,UAAU,iBACb,0BAAMA,UAAU,cACbpC,EAAElB,GACH,0BACE6G,WAAS,WACTC,WAAU,CAAC,CAACH,EAAgB3G,GAAU+G,QACtCC,aAAW,uBACXC,iBAAe,aACflD,QAAS,SAACmD,GAAD,OAAOA,EAAEC,oBAEjBR,EAAgB3G,GAAU+G,OAAS,kBAAC,IAAD,UAM3CK,IAAwBzH,KAAI,SAAC4F,GAAD,OAC3B,kBAACe,EAAD,CACEtC,IAAKuB,EACLvF,SAAUR,EAAUQ,GACpBuF,UAAWA,WAlDM,SAAC8B,EAAWC,GAAe,IAAD,IACnD,OAAIC,IAAK,UAACF,EAAUZ,yBAAX,aAAC,EAA6BzG,SAAUqH,EAAUrH,YAGvDuH,IAAK,UAACD,EAAUb,yBAAX,aAAC,EAA6BzG,SAAUsH,EAAUtH,aAoT9CM,UAAMC,MAtOrB,YAQI,IAPFkB,EAOC,EAPDA,MACAxB,EAMC,EANDA,MACAT,EAKC,EALDA,UACAgI,EAIC,EAJDA,MACAf,EAGC,EAHDA,kBACAgB,EAEC,EAFDA,iBACAf,EACC,EADDA,oBACC,EAC6CjG,mBAASjB,GADtD,mBACMmH,EADN,KACuBe,EADvB,OAEyCjH,oBAAS,GAFlD,mBAEMkH,EAFN,KAEqBC,EAFrB,OAG+BC,YAAgB,mBAAoB,CAClEzB,WAAY,YACZC,aAAa,IALd,mBAGMR,EAHN,KAGgBiC,EAHhB,KAQKC,EAAUC,cACT9G,EAAKC,cAALD,EAED+G,EAAUxC,mBACd,kBACE,0BACEnC,UAAWa,IACT,WACA,CAAC+D,gBAAiBP,GAClB,CAACQ,iBAAkBR,KAGrB,kBAAC,IAAD,SAGJ,CAACA,IAGGS,EAAoB/G,uBACxB,SAACpB,GACMsH,IAAMtH,EAAMA,MAAP,OAAcwG,QAAd,IAAcA,OAAd,EAAcA,EAAmBxG,QACzCwH,EAAiBxH,KAGrB,CAACwH,EAAkBhB,IAGf4B,EAAShH,uBACb,SAACwE,GACC,IAAKc,EAAiB,OAAO,KAC7B,IAAM2B,EAAS,GACf7I,OAAOC,KAAKiH,GACT4B,MAAK,SAACC,EAAWC,GAChB,MAA4B,aAAxB5C,EAASO,WACJP,EAASQ,YACZqC,SAAS/B,EAAgB6B,GAAW3C,EAASO,aAC3CsC,SAAS/B,EAAgB8B,GAAW5C,EAASO,aAC/CsC,SAAS/B,EAAgB8B,GAAW5C,EAASO,aAC3CsC,SAAS/B,EAAgB6B,GAAW3C,EAASO,aAE5CP,EAASQ,YACZmC,EAAUG,cAAcF,GACxBA,EAAUE,cAAcH,MAG/BI,SAAQ,SAAC5E,GACRsE,EAAOtE,GAAO2C,EAAgB3C,MAElC0D,EAAmBY,KAErB,CAAC3B,IAGGf,EAAavE,uBACjB,SAACkE,GACC,IAAMsD,EAAc,CAClBxC,aAAcR,EAASQ,YACvBD,WAAYb,GAEd8C,EAAOQ,GACPf,EAAYrI,OAAOqJ,OAAO,GAAIjD,EAAUgD,MAE1C,CAACR,EAAQP,EAAajC,IAOxB,OAJAkD,aAAc,WACY,OAApB9I,EAAM+I,WAAoBX,EAAOxC,MAIrC,kBAAC,IAAMpB,SAAP,KACE,wBACEnB,UAAWa,IACT,QACA,CAAC,WAAgC,OAApBlE,EAAM+I,WACnB,CAAC,kBAAmC,OAAjBvC,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBxG,SAAUA,EAAMA,OACtD,CAAC,SAAUwB,EAAQ,IAAM,IAE3BmF,aAAc,kBAAMwB,EAAkBnI,IACtC8D,QACsB,OAApB9D,EAAM+I,UACF,WACEpB,GAAkBD,IAEpB,MAGN,4BACE,yBAAKrE,UAAU,iBACQ,OAApBrD,EAAM+I,WAAsBf,EAC7B,0BAAM3E,UAAU,cACbpC,EAAEjB,EAAMA,OAET,0BACE6G,WAAU,CAAC7G,EAAMgJ,YACjBjC,aAAW,uBACXC,iBAAe,aACflD,QAAS,SAACmD,GAAD,OAAOA,EAAEC,oBAEjBlH,EAAMgJ,YAAc,kBAAC,IAAD,UAM5BC,IAAqBvJ,KAAI,SAAC4F,EAAW9D,GAAZ,OACxB,kBAAC6D,EAAD,CAAWtB,IAAKvC,EAAOxB,MAAOA,EAAOsF,UAAWA,QAInDoC,GACC,kBAAC,IAAMlD,SAAP,KACE,wBAAInB,UAAU,aACZ,wBAAI6F,QAAS,GACX,8BAIJ,wBAAI7F,UAAW,qBACb,wBAAI6F,QAAS,EAAGjD,MAAO,CAACkD,cAAe,IACrC,uBAAG9F,UAAU,WACb,2BACG+F,MAAMC,KAAKC,MAAMC,YAAWvJ,EAAMwJ,mBAC/B,GADH,UAEMvI,EAAE,gBAFR,YAE2BwI,YACtBzJ,EAAMwJ,iBAHX,YAIQvI,EAAE,UAEG,OAAfyF,QAAe,IAAfA,OAAA,EAAAA,EAAiBgD,UAChB,yBAAKrG,UAAU,cACb,kBAAC,IAAD,MACCpC,EAAE,oDAIQ,qBAAhBjB,EAAMA,OACL,wBACE2J,MAAM,SACNtG,UAAU,kBACV6F,QAAS,EACTpF,QAAS,WACPgE,EAAQhI,KAAR,gBAAsBE,EAAM+I,cAG7B9H,EAAE,gCAAiC,CAACjB,MAAOiB,EAAEjB,EAAMA,WAK1D,wBAAIqD,UAAWa,IAAW,qBACxB,wBAAIJ,QAAS,kBAAM6B,EAAW,cAC5B,yBAAKtC,UAAU,mBACb,0BAAMyC,MAAM,YAAY7E,EAAE,aAC1B,yBACEgF,MAAO,CACLC,QAC0B,aAAxBN,EAASO,WAA4B,UAAY,SAGpDP,EAASQ,YACR,yBAAK/C,UAAU,aAEf,yBAAKA,UAAU,kBAMtB8D,IAAwBzH,KAAI,SAAC4F,EAAW9D,GAAZ,OAC3B,kBAACkE,EAAD,CACE3B,IAAKvC,EACLmE,WAAYA,EACZL,UAAWA,EACXM,SAAUA,SAOnB8B,GACClI,OAAOC,KAAKiH,GAAiBhH,KAAI,SAACK,EAAUyB,GAAX,OAC/B,kBAAC+E,EAAD,CACExC,IAAKhE,EACLC,MAAOA,EACPD,SAAUA,EACVR,UAAWA,EACX4E,KAAI,OAAEoD,QAAF,IAAEA,OAAF,EAAEA,EAAQxH,GACd2G,gBAAiBA,EACjBF,kBAAmBA,EACnBC,oBAAqBA,OAI1BiB,GACC,wBAAIrE,UAAU,aACZ,wBAAI6F,QAAS,GACX,4BACA,kBAAC,IAAD,CACEtF,GAAG,WACHgG,MAAM,QACNjI,KAAK,OACLkI,OAAO,QACPC,WAAW,EACXC,YAAY,EACZC,eAAe,gBApPb,SAAC5C,EAAWC,GAAe,IAAD,QACxC,QAAKC,IAAMF,EAAUpH,MAAMA,MAAOqH,EAAUrH,MAAMA,WAI/CsH,IAAK,UACJF,EAAUZ,yBADN,aACJ,EAA6BxG,MADzB,UAEJqH,EAAUb,yBAFN,aAEJ,EAA6BxG,UAM9BsH,IAAK,UACJF,EAAUZ,yBADN,aACJ,EAA6BzG,SADzB,UAEJsH,EAAUb,yBAFN,aAEJ,EAA6BzG,cClJ7BiF,EAAgBC,YAAiB,CAACC,GAAI,KAAMC,EAAG,IAAKC,EAAG,MAE7D,SAAS6E,EAAT,GAA6D,IAAnCtE,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,SAAUN,EAAY,EAAZA,UACxCO,EAAab,IACZ/D,EAAKC,cAALD,EAEP,OACE,wBAAI6C,QAAS,kBAAM6B,EAAWL,KAC5B,yBAAKjC,UAAU,mBACb,0BACEA,UAAWa,IAAW,4BAAQoB,GAA6B,MAAfO,IAC5CC,MAAOR,GAES,MAAfO,EACGP,EAAUxD,MAAM,GACD,MAAf+D,EACAE,YACEC,YAAyB,WAAdV,EAAyB,WAAaA,IAEnDrE,EAAE8E,YAAyB,WAAdT,EAAyB,WAAaA,KAEzD,yBACEW,MAAO,CACLC,QAASN,EAASO,aAAeb,EAAY,UAAY,SAG3D,yBACEjC,UAAWa,IACT,CAAC,WAAY0B,EAASQ,aACtB,CAAC,cAAeR,EAASQ,mBAoMxB/F,WAAMC,MAvLrB,YAOI,IANF4J,EAMC,EANDA,OACA3K,EAKC,EALDA,UACAgI,EAIC,EAJDA,MACAf,EAGC,EAHDA,kBACAgB,EAEC,EAFDA,iBACAf,EACC,EADDA,oBACC,EAC+BmB,YAAgB,WAAY,CAC1DzB,WAAY,YACZC,aAAa,IAHd,mBACMR,EADN,KACgBiC,EADhB,KAMM5G,EAAKC,cAALD,EANN,EAQuCT,mBACtC0J,EAAOC,QAAO,SAACnK,GAAD,MAA+B,OAApBA,EAAM+I,cAThC,mBAQMqB,EARN,KAQoBC,EARpB,KAYKC,EAAe9E,mBACnB,kBACE,kBAAC,IAAMhB,SAAP,KACE,wBACEnB,UAAU,2BACV4C,MAAO,CAACsE,eAAgB,SAEvBtJ,EAAE,qCAJL,IAI4C,IAC1C,kBAAC,IAAD,CAAM+C,GAAG,SAASiC,MAAO,CAACuE,MAAO,YAC9BvJ,EAAE,aADL,MAIF,wBACEoC,UAAU,2BACV4C,MAAO,CAACsE,eAAgB,SAEvBtJ,EAAE,wCACF,KACD,uBACEqD,KAAK,mGACL2B,MAAO,CAACuE,MAAO,YAEdvJ,EAAE,eAKX,CAACA,IAGGwJ,EAAkBjF,mBACtB,kBACE,wBAAInC,UAAU,2BAA2B4C,MAAO,CAACsE,eAAgB,OAC9DL,EAAOpI,MAAM,GAAGqI,QAAO,SAACO,GAAD,OAAOA,GAAKA,EAAEC,UAAY,KAAG9G,OADvD,0BAKF,CAACqG,IAGG9B,EAAShH,uBACb,SAACwE,GACC,IAAMgF,EAAkB,YAAIR,GAAc9B,MAAK,SAACuC,EAAGC,GACjD,MAA4B,UAAxBlF,EAASO,WACJP,EAASQ,YACZqC,SAASoC,EAAEjF,EAASO,aAClBsC,SAASqC,EAAElF,EAASO,aACtBsC,SAASqC,EAAElF,EAASO,aAClBsC,SAASoC,EAAEjF,EAASO,aAEnBP,EAASQ,YACZyE,EAAEjF,EAASO,YAAYuC,cAAcoC,EAAElF,EAASO,aAChD2E,EAAElF,EAASO,YAAYuC,cAAcmC,EAAEjF,EAASO,gBAGxDkE,EAAgBO,KAElB,CAACR,IAGGzE,EAAavE,uBACjB,SAACkE,GACC,IAAMsD,EAAc,CAClBxC,aAAcR,EAASQ,YACvBD,WAAYb,GAEd8C,EAAOQ,GACPf,EAAYrI,OAAOqJ,OAAO,GAAIjD,EAAUgD,MAE1C,CAACR,EAAQP,EAAajC,IAOxB,OAJAkD,aAAc,WACZV,EAAOxC,MAGLsE,EAAOrG,OAAS,EAEhB,kBAAC,IAAMW,SAAP,KACE,kBAAC,IAAD,CACEoF,MAAM,QACNjI,KAAK,OACLkI,OAAO,QACPC,WAAW,EACXE,eAAe,UAGhBM,EAED,2BAAOjH,UAAU,iBAAiB4C,MAAO,CAACsE,eAAgB,SACxD,+BACE,4BACE,wBAAIlH,UAAU,gBAAgBS,QAAS,kBAAM6B,EAAW,WACtD,yBAAKtC,UAAU,mBACb,0BAAMyC,MAAM,SAAS7E,EAAE,aACvB,yBACEgF,MAAO,CACLC,QAC0B,UAAxBN,EAASO,WAAyB,UAAY,SAGlD,yBACE9C,UAAWa,IACT,CAAC,WAAY0B,EAASQ,aACtB,CAAC,cAAeR,EAASQ,mBAMlC6C,IAAqBvJ,KAAI,SAAC4F,EAAW9D,GAAZ,OACxB,kBAACyI,EAAD,CACElG,IAAKvC,EACLmE,WAAYA,EACZC,SAAUA,EACVN,UAAWA,SAMlB4E,GACC,+BACGE,EAAa1K,KAAI,SAACM,EAAOwB,GAC8B,IAAD,EAArD,OAAIxB,EAAM2K,UAAY,GAAyB,OAApB3K,EAAM+I,UAE7B,kBAAC,EAAD,CACEhF,IAAK/D,EAAM+I,UACX/I,MAAOA,EACPT,UAAS,UAAEA,EAAUS,EAAMA,cAAlB,aAAE,EAAwBJ,aACnC2H,MAAOA,EAAMvH,EAAMA,OACnBwG,kBACEc,IAAK,OAACd,QAAD,IAACA,OAAD,EAACA,EAAmBxG,MAAOA,EAAMA,OAClCwG,EACA,KAENgB,iBAAkBA,EAClBf,oBAAqBA,IAIpB,SAKZyD,GACC,+BACE,kBAAC,EAAD,CACEnG,IAAK,EACL/D,MAAOkK,EAAO,GACd1C,iBAAkBA,MAKzB0C,GAAUO,GAIR,yBAAKxE,MAAO,CAAC8E,OAAQ,cAvLhB,SAAC3D,EAAWC,GAC1B,OAAOC,IAAMF,EAAUZ,kBAAmBa,EAAUb,sB,kDC/ChDwE,GAAU,IAAI3B,KAChB4B,GAAcD,GA8EHE,OA5Ef,SAAiBC,GAAQ,IAAD,EACQ3K,mBAAS,IADjB,mBACf4K,EADe,KACNC,EADM,KAoBtB,OAjBAvC,aAAc,WACZwC,KACGC,IAAI,mDACJC,MAAK,SAAClM,GACL+L,EAAW/L,EAASmM,SAErBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,SAMlBG,2BAAgB,WACdb,GAAcD,MAId,yBAAK3H,UAAU,WACb,yBAAKA,UAAU,kBACb,4BAAK0I,aAAOd,GAAa,WAG1BG,EACEtJ,OAAO,GACPkK,UACAtM,KAAI,SAAUuM,EAAUzK,GACvByK,EAASC,OAASD,EAASC,OAAOC,QAAQ,MAAO,SACjD,IAAMC,EAAe,IAAI/C,KAA0B,IAArB4C,EAASI,WAoBvC,OACE,kBAAC,IAAM7H,SAAP,CAAgBT,IAAKvC,GAClB4K,EAAaE,YAAcrB,GAAYqB,WApB1CrB,GAAcmB,EAGZ,kBAAC,IAAM5H,SAAP,KACa,IAAVhD,EACC,yBAAK6B,UAAU,UACb,gDAGF,GAEF,yBAAKA,UAAU,kBACb,4BAAK0I,aAAOK,EAAc,aAU1B,IACJ,yBAAKrI,IAAKvC,EAAO6B,UAAU,UACzB,4BACGkJ,aACC,IAAIlD,KAA0B,IAArB4C,EAASI,WAClB,IAAIhD,MACF,QAEN,wBACEmD,wBAAyB,CACvBC,OAAQR,EAASC,iB,6BC4KtBQ,UAzNf,SAAcvB,GAAQ,IAAD,EACS3K,mBAAS,MADlB,mBACZ0J,EADY,KACJyC,EADI,OAEuCnM,mBAAS,MAFhD,mBAEZoM,EAFY,KAEWC,EAFX,OAGuBrM,mBAAS,MAHhC,mBAGZD,EAHY,KAGGuM,EAHH,OAIuBtM,mBAAS,MAJhC,mBAIZuM,EAJY,KAIGC,EAJH,OAKmBxM,mBAAS,IAL5B,mBAKZyM,EALY,KAKCC,EALD,OAMiB1M,mBAAS,MAN1B,mBAMZ2M,EANY,KAMAC,EANA,OAOW5M,oBAAS,GAPpB,mBAOZ6M,EAPY,KAOHC,EAPG,OAQ+B9M,mBAAS,CACzDR,MAAO,UATU,mBAQZwG,EARY,KAQO+G,EARP,OAWmB/M,oBAAS,GAX5B,mBAWZgN,EAXY,KAWCC,EAXD,OAYSjN,mBAAS,MAZlB,mBAYZkN,EAZY,KAYJC,GAZI,QAaenN,mBAAS,aAbxB,qBAaZoN,GAbY,MAaDC,GAbC,SAeuBjG,YACxC,gBACA,MAjBiB,qBAeZkG,GAfY,MAeGC,GAfH,SAmBenG,YAAgB,aAAa,GAnB5C,qBAmBZoG,GAnBY,MAmBDC,GAnBC,MAqBbC,GAAO1I,mBACX,kBACE,kBAAC,KAAD,CACE1B,QAAS,WACP2J,GAAgBD,GAChBS,IAAa,QAInB,CAACA,GAAcT,IAGXW,GAAU3I,mBACd,kBACE,kBAAC,KAAD,CACE1B,QAAS,WACP2J,GAAgBD,QAItB,CAACA,IAGH1E,aAAc,WACZsF,QAGFtF,aAAc,WACZwC,KACGC,IAAI,mDACJC,MAAK,SAAClM,GACL,IAAM+O,EAAgB/O,EAASmM,KAC5B3J,QACAkK,UAAU,GACVK,UAAUiC,WACTD,IAAkBP,KACpBG,IAAa,GACbF,GAAiBM,OAGpB3C,OAAM,SAACC,GACNC,QAAQC,IAAIF,SAIlB,IAAMyC,GAAS,uCAAG,sDAAAG,EAAA,+EAKJC,QAAQC,IAAI,CACpBnD,KAAMC,IAAI,kDACVD,KAAMC,IAAI,6CAPE,0CAGLmD,EAHK,KAGXjD,KACMkD,EAJK,KAIXlD,KAJW,SAcJ+C,QAAQC,IAAI,CACpBnD,KAAMC,IAAI,0CACVD,KAAMC,IAAI,yDACVD,KAAMC,IAAI,uDAjBE,mCAWXE,EAXW,KAWXA,KACMmD,EAZK,KAYXnD,KACMsB,EAbK,KAaXtB,KAOHkB,EAAUlB,EAAKoD,WACf/B,EAAiBgC,YAAmBH,EAAcpH,SAE5CwH,EAAKC,YAAqBN,IAC9B,GAASO,YAAqBxD,EAAKyD,oBAE/BC,EAASC,YAAyBrC,EAAcsC,qBAChD,GAASC,YAAyB7D,EAAK8D,QAEvCC,EAAWC,YAAgBV,EAAII,GACrC/B,EAAcoC,GAEdtC,EAAezB,EAAKoD,UAAU,GAAGrF,iBAE3BkG,EAAWC,YAAmB5C,EAAcsC,oBAC5CO,EAAYnE,EAAK8D,OAAO9D,EAAK8D,OAAO1L,OAAS,GACnD6L,EAAQ,MAAY,CAClBG,OAAQD,EAAUC,OAClBC,YAAaF,EAAUG,mBACvBC,UAAWJ,EAAUK,gBAAgBC,MAAM,KAAK,IAElDlD,EAAiB0C,GAEjB7C,EAAyB+B,GACzBtB,GAAW,GA5CG,kDA8Cd1B,QAAQC,IAAR,MA9Cc,0DAAH,qDAkDTrE,GAAmBpG,uBAAY,SAACpB,GACpC,IAAKA,EAAO,OAAOuN,EAAqB,MACxCA,EAAqB,CAACvN,MAAOA,EAAMA,UAClC,IAEGyG,GAAsBrF,uBAAY,SAACrB,EAAUC,GACjD,IAAKA,IAAUD,EAAU,OAAOwN,EAAqB,MACrDA,EAAqB,CAACxN,WAAUC,MAAOA,EAAMA,UAC5C,IAEH,OACE,kBAAC,IAAMwE,SAAP,KACE,yBAAKnB,UAAU,QACb,kBAAC8M,GAAA,EAAD,KACE,mFACA,0BACEzO,KAAK,QACL0O,QAAQ,8DAIZ,yBAAK/M,UAAU,aACb,yBAAKA,UAAU,kBAAkB4C,MAAO,CAACsE,eAAgB,OACtD8C,GAAW,kBAAC,EAAD,CAAQ9M,cAAeA,IAEnC,yBAAK8C,UAAU,WACb,4BACG+F,MAAMC,KAAKC,MAAMC,YAAW0D,KACzB,GADH,UAEMoD,YAAmBpD,GAFzB,SAIFI,IAAYG,GACX,yBAAKnK,UAAU,aACZgK,GAAWa,GACXF,IAAa,yBAAK3K,UAAU,eAGhCgK,GAAWG,GAAeW,KAI9BX,GAAe,kBAAC,GAAD,MAEftD,GAAU,kBAAC,IAAD,CAAOuB,KAAMvB,EAAO,KAC9BiD,GAAc,kBAAC,IAAD,CAAWA,WAAYA,EAAU,KAC/CP,GACC,kBAAC,GAAD,CACE1C,OAAQA,EACRoG,SAAS,EACT/Q,UAAWqN,EACXrF,MAAOhH,EACPiG,kBAAmBA,EACnB+G,qBAAsBA,EACtB/F,iBAAkBA,GAClBf,oBAAqBA,MAK3B,yBAAKpD,UAAU,cACb,kBAAC,IAAMmB,SAAP,KACG6I,GACC,kBAAC,IAAD,CACEkD,QAAS,QACTrG,OAAQA,EACR3K,UAAWqN,EACXrF,MAAOhH,EACPwM,cAAeA,EACfvG,kBAAmBA,EACnB+G,qBAAsBA,EACtBG,OAAQA,EACRC,UAAWA,GACXC,UAAWA,GACXC,aAAcA,KAIjBV,GACC,kBAAC,KAAD,CACEA,WACEA,EACEnL,IAAmB,OAACwE,QAAD,IAACA,OAAD,EAACA,EAAmBxG,QAAU,MAGrDwQ,gBACExO,IAAmB,OAACwE,QAAD,IAACA,OAAD,EAACA,EAAmBxG,QAAU,KAEnDwH,iBAAkBA,GAClB0C,OAAQA,EACRwD,OAAQA,EACRC,UAAWA,QAMpBN,GAAW,kBAAC,IAAD","file":"static/js/Home.09131308.chunk.js","sourcesContent":["import {\n  STATE_CODES_ARRAY,\n  STATE_CODES_REVERSE,\n  STATE_CODES,\n} from '../constants';\n\nimport classnames from 'classnames';\nimport Bloodhound from 'corejs-typeahead';\nimport React, {useState, useCallback, useRef} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {Link} from 'react-router-dom';\nimport {useDebounce} from 'react-use';\n\nconst engine = new Bloodhound({\n  initialize: true,\n  local: STATE_CODES_ARRAY,\n  queryTokenizer: Bloodhound.tokenizers.whitespace,\n  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),\n});\n\nconst districtEngine = new Bloodhound({\n  initialize: true,\n  limit: 5,\n  queryTokenizer: Bloodhound.tokenizers.whitespace,\n  datumTokenizer: Bloodhound.tokenizers.obj.whitespace('district'),\n  indexRemote: true,\n  remote: {\n    url: 'https://api.covid19india.org/state_district_wise.json',\n    transform: function (response) {\n      const districts = [];\n      Object.keys(response).map((stateName) => {\n        const districtData = response[stateName].districtData;\n        Object.keys(districtData).map((districtName) => {\n          return districts.push({district: districtName, state: stateName});\n        });\n        return null;\n      });\n      return districts;\n    },\n  },\n});\n\nconst essentialsEngine = new Bloodhound({\n  initialize: true,\n  limit: 5,\n  queryTokenizer: Bloodhound.tokenizers.whitespace,\n  datumTokenizer: Bloodhound.tokenizers.obj.whitespace(\n    'category',\n    'city',\n    'contact',\n    'descriptionandorserviceprovided',\n    'nameoftheorganisation',\n    'state'\n  ),\n  indexRemote: true,\n  remote: {\n    url: 'https://api.covid19india.org/resources/resources.json',\n    transform: function (response) {\n      return response.resources;\n    },\n  },\n});\n\n/* let focused = false;\nconst suggestions = [\n  'Karnataka',\n  'West Bengal',\n  'Alappuzha',\n  'Senior citizen support bangalore',\n  'Community Kitchen in Kerala',\n  'Groceries Chennai',\n];*/\n\nconst essentialSuggestions = [\n  'Testing Pune',\n  'Delhi Shelter',\n  'Community Kitchen in Kerala',\n  'Groceries Chennai',\n  'Senior citizen support bangalore',\n];\nconst locationSuggestions = [\n  'Mumbai',\n  'Karnataka',\n  'Chennai',\n  'Alappuzha',\n  'Ganjam',\n];\n\nfunction Search({districtZones}) {\n  const [searchValue, setSearchValue] = useState('');\n  const [expand, setExpand] = useState(false);\n  const [results, setResults] = useState([]);\n  const searchInput = useRef(null);\n  const {t} = useTranslation();\n\n  const handleSearch = useCallback((searchInput) => {\n    const results = [];\n\n    const sync = (datums) => {\n      datums.map((result, index) => {\n        const stateObj = {\n          name: result.name,\n          type: 'state',\n          route: result.code,\n        };\n        results.push(stateObj);\n        return null;\n      });\n    };\n\n    const districtSync = (datums) => {\n      datums.slice(0, 3).map((result, index) => {\n        const districtObj = {\n          name: result.district,\n          type: 'district',\n          route: STATE_CODES_REVERSE[result.state],\n        };\n        results.push(districtObj);\n        return null;\n      });\n    };\n\n    const essentialsSync = (datums) => {\n      datums.slice(0, 5).map((result, index) => {\n        const essentialsObj = {\n          name: result.nameoftheorganisation,\n          type: 'essentials',\n          category: result.category,\n          website: result.contact,\n          description: result.descriptionandorserviceprovided,\n          city: result.city,\n          state: result.state,\n          contact: result.phonenumber,\n        };\n        results.push(essentialsObj);\n        return null;\n      });\n      setResults([...results]);\n    };\n\n    engine.search(searchInput, sync);\n    districtEngine.search(searchInput, districtSync);\n    essentialsEngine.search(searchInput, essentialsSync);\n  }, []);\n\n  useDebounce(\n    () => {\n      if (searchValue) {\n        handleSearch(searchValue);\n      } else {\n        setResults([]);\n      }\n    },\n    100,\n    [searchValue]\n  );\n\n  function setNativeValue(element, value) {\n    const valueSetter = Object.getOwnPropertyDescriptor(element, 'value').set;\n    const prototype = Object.getPrototypeOf(element);\n    const prototypeValueSetter = Object.getOwnPropertyDescriptor(\n      prototype,\n      'value'\n    ).set;\n\n    if (valueSetter && valueSetter !== prototypeValueSetter) {\n      prototypeValueSetter.call(element, value);\n    } else {\n      valueSetter.call(element, value);\n    }\n  }\n\n  /* function fillPlaceholder(target, index, cursorPosition, callback) {\n    if (focused) {\n      target.textContent = '';\n      return true;\n    }\n    const text = t(suggestions[index]);\n    const placeholder = target.textContent;\n    target.classList.remove('disappear');\n    target.textContent = placeholder + text[cursorPosition];\n    if (cursorPosition < text.length - 1) {\n      setTimeout(function () {\n        fillPlaceholder(target, index, cursorPosition + 1, callback);\n      }, 200);\n      return true;\n    }\n    callback();\n  }\n\n  function clearPlaceholder(target, callback) {\n    const placeholder = target.textContent;\n    target.classList.add('disappear');\n    if (placeholder.length > 0) {\n      setTimeout(function () {\n        target.textContent = '';\n        clearPlaceholder(target, callback);\n      }, 1000);\n      return true;\n    }\n    callback();\n  }\n\n  function loopThroughSuggestions(target, index) {\n    if (focused) {\n      target.textContent = '';\n      return true;\n    }\n    fillPlaceholder(target, index, 0, function () {\n      setTimeout(function () {\n        clearPlaceholder(target, function () {\n          loopThroughSuggestions(target, (index + 1) % suggestions.length);\n        });\n      }, 2000);\n    });\n  }\n\n  const targetInput = document.getElementById('search-placeholder');\n  if (targetInput) loopThroughSuggestions(targetInput, 0);*/\n\n  return (\n    <div className=\"Search\">\n      <label>{t('Search your city, resources, etc')}</label>\n      <div className=\"line\"></div>\n\n      <div className=\"search-input-wrapper\">\n        <input\n          type=\"text\"\n          value={searchValue}\n          ref={searchInput}\n          onFocus={(event) => {\n            setExpand(true);\n          }}\n          onBlur={() => {\n            setExpand(false);\n          }}\n          onChange={(event) => {\n            setSearchValue(event.target.value);\n          }}\n        />\n        <span id=\"search-placeholder\" className=\"search-placeholder\"></span>\n\n        <div className={`search-button`}>\n          <Icon.Search />\n        </div>\n\n        {searchValue.length > 0 && (\n          <div\n            className={`close-button`}\n            onClick={() => {\n              setSearchValue('');\n              setResults([]);\n            }}\n          >\n            <Icon.X />\n          </div>\n        )}\n      </div>\n\n      {results.length > 0 && (\n        <div className=\"results\">\n          {results.map((result, index) => {\n            if (result.type === 'state' || result.type === 'district') {\n              return (\n                <Link key={index} to={`state/${result.route}`}>\n                  <div className=\"result\">\n                    <div className=\"result-left\">\n                      <div className=\"result-name\">\n                        {`${result.name}`}\n                        {result.type === 'district' &&\n                          `, ${STATE_CODES[result.route]}`}\n                      </div>\n                      <div\n                        className={classnames('result-zone', {\n                          [`is-${districtZones[STATE_CODES[result.route]][\n                            result.name\n                          ]?.zone.toLowerCase()}`]: true,\n                        })}\n                      ></div>\n                    </div>\n                    <div className=\"result-type\">\n                      <span>{[result.route]}</span>\n                      <Icon.ArrowRightCircle size={14} />\n                    </div>\n                  </div>\n                </Link>\n              );\n            } else {\n              return (\n                <a\n                  key={index}\n                  href={result.website}\n                  target=\"_noblank\"\n                  className=\"essential-result\"\n                >\n                  <div className=\"result-top\">\n                    <div className=\"result-top-left\">\n                      <div className=\"result-name\">{result.name}</div>\n                      <div className=\"result-location\">\n                        {result.city && `${result.city}, `}\n                        {result.state}\n                      </div>\n                    </div>\n                    <div className=\"result-category\">\n                      <div>\n                        {result.category.match('Delivery')\n                          ? 'Home Delivery'\n                          : result.category.match('Helpline for Cyclone Amphan')\n                          ? 'Cyclone Amphan'\n                          : result.category}\n                      </div>\n                      <Icon.ExternalLink />\n                    </div>\n                  </div>\n                  <div className=\"result-description\">{result.description}</div>\n                  <div className=\"result-contact\">\n                    <Icon.Phone />\n                    <div>{result.contact}</div>\n                  </div>\n                </a>\n              );\n            }\n          })}\n        </div>\n      )}\n\n      {expand && (\n        <React.Fragment>\n          <p\n            className=\"feature\"\n            onMouseDown={(event) => {\n              event.preventDefault();\n              setNativeValue(searchInput.current, 'Cyclone Amphan');\n              searchInput.current.dispatchEvent(\n                new Event('input', {bubbles: true})\n              );\n            }}\n          >\n            To those who are in states affected by Cyclone Amphan or have\n            family/friends there, click here to view helplines for assistance.\n          </p>\n          <div className=\"expanded\">\n            <div className=\"expanded-left\">\n              <h3>{t('Essentials')}</h3>\n              <div className=\"suggestions\">\n                {essentialSuggestions.map((suggestion, index) => (\n                  <div className=\"suggestion\" key={index}>\n                    <div>-</div>\n                    <h4\n                      onMouseDown={(event) => {\n                        event.preventDefault();\n                        setNativeValue(searchInput.current, suggestion);\n                        searchInput.current.dispatchEvent(\n                          new Event('input', {bubbles: true})\n                        );\n                      }}\n                    >\n                      {t(suggestion)}\n                    </h4>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"expanded-right\">\n              <h3>{t('Locations')}</h3>\n              <div className=\"suggestions\">\n                {locationSuggestions.map((suggestion, index) => (\n                  <div className=\"suggestion\" key={index}>\n                    <div>-</div>\n                    <h4\n                      onMouseDown={(event) => {\n                        event.preventDefault();\n                        setNativeValue(searchInput.current, suggestion);\n                        searchInput.current.dispatchEvent(\n                          new Event('input', {bubbles: true})\n                        );\n                      }}\n                    >\n                      {t(suggestion)}\n                    </h4>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(Search);\n","import {STATE_ROW_STATISTICS, DISTRICT_ROW_STATISTICS} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  capitalize,\n  abbreviate,\n} from '../utils/commonfunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React, {useState, useCallback, useMemo} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport ReactTooltip from 'react-tooltip';\nimport {createBreakpoint, useLocalStorage, useEffectOnce} from 'react-use';\n\nconst useBreakpoint = createBreakpoint({XL: 1280, L: 768, S: 350});\n\nfunction StateCell({state, statistic}) {\n  const ArrowUp = useMemo(() => <Icon.ArrowUp />, []);\n\n  return (\n    <td>\n      <span className={classnames('delta', `is-${statistic}`)}>\n        {state[`delta${statistic}`] > 0 && ArrowUp}\n        {state[`delta${statistic}`] > 0 && state[`delta${statistic}`]}\n      </span>\n      <span className=\"total\">\n        {state[statistic] === 0 ? '-' : formatNumber(state[statistic])}\n      </span>\n    </td>\n  );\n}\n\nfunction DistrictHeaderCell({handleSort, statistic, sortData}) {\n  const breakpoint = useBreakpoint();\n  const {t} = useTranslation();\n\n  return (\n    <td onClick={() => handleSort(statistic)}>\n      <div className=\"heading-content\">\n        <abbr\n          className={classnames({[`is-${statistic}`]: breakpoint === 'S'})}\n          title={statistic}\n        >\n          {breakpoint === 'L'\n            ? statistic.slice(0)\n            : breakpoint === 'S'\n            ? capitalize(\n                abbreviate(statistic === 'deaths' ? 'deceased' : statistic)\n              )\n            : t(capitalize(statistic === 'deaths' ? 'deceased' : statistic))}\n        </abbr>\n        <div\n          style={{\n            display: sortData.sortColumn === statistic ? 'initial' : 'none',\n          }}\n        >\n          {sortData.isAscending ? (\n            <div className=\"arrow-up\" />\n          ) : (\n            <div className=\"arrow-down\" />\n          )}\n        </div>\n      </div>\n    </td>\n  );\n}\n\nfunction PureDistrictCell({district, statistic}) {\n  return (\n    <td>\n      <span className={classnames('delta', `is-${statistic}`)}>\n        {district.delta[statistic] > 0 && <Icon.ArrowUp />}\n        {district.delta[statistic] > 0 && district.delta[statistic]}\n      </span>\n      <span className=\"total\">{formatNumber(district[statistic])}</span>\n    </td>\n  );\n}\n\nconst DistrictCell = React.memo(PureDistrictCell);\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (equal(prevProps.regionHighlighted?.district, prevProps.district)) {\n    return false;\n  }\n  if (equal(currProps.regionHighlighted?.district, currProps.district)) {\n    return false;\n  }\n  return true;\n};\n\nfunction PureDistrictRow({\n  regionHighlighted,\n  district,\n  state,\n  zone,\n  onHighlightDistrict,\n  sortedDistricts,\n  districts,\n}) {\n  const {t} = useTranslation();\n\n  return (\n    <tr\n      key={district.district}\n      className={classnames('district', {\n        'is-highlighted': regionHighlighted?.district === district,\n      })}\n      onMouseEnter={() => onHighlightDistrict(district, state)}\n    >\n      <td className={classnames(`is-${zone?.zone}`)}>\n        <div className=\"title-chevron\">\n          <span className=\"title-icon\">\n            {t(district)}\n            <span\n              data-for=\"district\"\n              data-tip={[[sortedDistricts[district].notes]]}\n              data-event=\"touchstart mouseover\"\n              data-event-off=\"mouseleave\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              {sortedDistricts[district].notes && <Icon.Info />}\n            </span>\n          </span>\n        </div>\n      </td>\n\n      {DISTRICT_ROW_STATISTICS.map((statistic) => (\n        <DistrictCell\n          key={statistic}\n          district={districts[district]}\n          statistic={statistic}\n        />\n      ))}\n    </tr>\n  );\n}\n\nconst DistrictRow = React.memo(PureDistrictRow, isDistrictRowEqual);\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.state.state, currProps.state.state)) {\n    return false;\n  }\n  if (\n    !equal(\n      prevProps.regionHighlighted?.state,\n      currProps.regionHighlighted?.state\n    )\n  ) {\n    return false;\n  }\n  if (\n    !equal(\n      prevProps.regionHighlighted?.district,\n      currProps.regionHighlighted?.district\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nfunction Row({\n  index,\n  state,\n  districts,\n  zones,\n  regionHighlighted,\n  onHighlightState,\n  onHighlightDistrict,\n}) {\n  const [sortedDistricts, setSortedDistricts] = useState(districts);\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useLocalStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const Chevron = useMemo(\n    () => (\n      <span\n        className={classnames(\n          'dropdown',\n          {rotateRightDown: showDistricts},\n          {rotateDownRight: !showDistricts}\n        )}\n      >\n        <Icon.ChevronDown />\n      </span>\n    ),\n    [showDistricts]\n  );\n\n  const _onHighlightState = useCallback(\n    (state) => {\n      if (!equal(state.state, regionHighlighted?.state)) {\n        onHighlightState(state);\n      }\n    },\n    [onHighlightState, regionHighlighted]\n  );\n\n  const doSort = useCallback(\n    (sortData) => {\n      if (!sortedDistricts) return null;\n      const sorted = {};\n      Object.keys(sortedDistricts)\n        .sort((district1, district2) => {\n          if (sortData.sortColumn !== 'district') {\n            return sortData.isAscending\n              ? parseInt(sortedDistricts[district1][sortData.sortColumn]) -\n                  parseInt(sortedDistricts[district2][sortData.sortColumn])\n              : parseInt(sortedDistricts[district2][sortData.sortColumn]) -\n                  parseInt(sortedDistricts[district1][sortData.sortColumn]);\n          } else {\n            return sortData.isAscending\n              ? district1.localeCompare(district2)\n              : district2.localeCompare(district1);\n          }\n        })\n        .forEach((key) => {\n          sorted[key] = sortedDistricts[key];\n        });\n      setSortedDistricts(sorted);\n    },\n    [sortedDistricts]\n  );\n\n  const handleSort = useCallback(\n    (statistic) => {\n      const newSortData = {\n        isAscending: !sortData.isAscending,\n        sortColumn: statistic,\n      };\n      doSort(newSortData);\n      setSortData(Object.assign({}, sortData, newSortData));\n    },\n    [doSort, setSortData, sortData]\n  );\n\n  useEffectOnce(() => {\n    if (state.statecode !== 'TT') doSort(sortData);\n  });\n\n  return (\n    <React.Fragment>\n      <tr\n        className={classnames(\n          'state',\n          {'is-total': state.statecode === 'TT'},\n          {'is-highlighted': regionHighlighted?.state === state.state},\n          {'is-odd': index % 2 === 0}\n        )}\n        onMouseEnter={() => _onHighlightState(state)}\n        onClick={\n          state.statecode !== 'TT'\n            ? () => {\n                setShowDistricts(!showDistricts);\n              }\n            : null\n        }\n      >\n        <td>\n          <div className=\"title-chevron\">\n            {state.statecode !== 'TT' && Chevron}\n            <span className=\"title-icon\">\n              {t(state.state)}\n\n              <span\n                data-tip={[state.statenotes]}\n                data-event=\"touchstart mouseover\"\n                data-event-off=\"mouseleave\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                {state.statenotes && <Icon.Info />}\n              </span>\n            </span>\n          </div>\n        </td>\n\n        {STATE_ROW_STATISTICS.map((statistic, index) => (\n          <StateCell key={index} state={state} statistic={statistic} />\n        ))}\n      </tr>\n\n      {showDistricts && (\n        <React.Fragment>\n          <tr className=\"is-spacer\">\n            <td colSpan={5}>\n              <p />\n            </td>\n          </tr>\n\n          <tr className={'state-last-update'}>\n            <td colSpan={3} style={{paddingBottom: 0}}>\n              <p className=\"spacer\"></p>\n              <p>\n                {isNaN(Date.parse(formatDate(state.lastupdatedtime)))\n                  ? ''\n                  : `${t('Last updated')} ${formatLastUpdated(\n                      state.lastupdatedtime\n                    )} ${t('ago')}`}\n              </p>\n              {sortedDistricts?.Unknown && (\n                <div className=\"disclaimer\">\n                  <Icon.AlertCircle />\n                  {t('District-wise numbers are under reconciliation')}\n                </div>\n              )}\n            </td>\n            {state.state !== 'State Unassigned' && (\n              <td\n                align=\"center\"\n                className=\"state-page-link\"\n                colSpan={2}\n                onClick={() => {\n                  history.push(`state/${state.statecode}`);\n                }}\n              >\n                {t('See more details on {{state}}', {state: t(state.state)})}\n              </td>\n            )}\n          </tr>\n\n          <tr className={classnames('district-heading')}>\n            <td onClick={() => handleSort('district')}>\n              <div className=\"heading-content\">\n                <abbr title=\"District\">{t('District')}</abbr>\n                <div\n                  style={{\n                    display:\n                      sortData.sortColumn === 'district' ? 'initial' : 'none',\n                  }}\n                >\n                  {sortData.isAscending ? (\n                    <div className=\"arrow-up\" />\n                  ) : (\n                    <div className=\"arrow-down\" />\n                  )}\n                </div>\n              </div>\n            </td>\n\n            {DISTRICT_ROW_STATISTICS.map((statistic, index) => (\n              <DistrictHeaderCell\n                key={index}\n                handleSort={handleSort}\n                statistic={statistic}\n                sortData={sortData}\n              />\n            ))}\n          </tr>\n        </React.Fragment>\n      )}\n\n      {showDistricts &&\n        Object.keys(sortedDistricts).map((district, index) => (\n          <DistrictRow\n            key={district}\n            state={state}\n            district={district}\n            districts={districts}\n            zone={zones?.[district]}\n            sortedDistricts={sortedDistricts}\n            regionHighlighted={regionHighlighted}\n            onHighlightDistrict={onHighlightDistrict}\n          />\n        ))}\n\n      {showDistricts && (\n        <tr className=\"is-spacer\">\n          <td colSpan={5}>\n            <p />\n            <ReactTooltip\n              id=\"district\"\n              place=\"right\"\n              type=\"dark\"\n              effect=\"solid\"\n              multiline={true}\n              scrollHide={true}\n              globalEventOff=\"click\"\n            />\n          </td>\n        </tr>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(Row, isEqual);\n","import Row from './row';\n\nimport {STATE_ROW_STATISTICS} from '../constants';\nimport {capitalize, abbreviate} from '../utils/commonfunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React, {useState, useMemo, useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Link} from 'react-router-dom';\nimport ReactTooltip from 'react-tooltip';\nimport {createBreakpoint, useLocalStorage, useEffectOnce} from 'react-use';\n\nconst useBreakpoint = createBreakpoint({XL: 1280, L: 768, S: 350});\n\nfunction StateHeaderCell({handleSort, sortData, statistic}) {\n  const breakpoint = useBreakpoint();\n  const {t} = useTranslation();\n\n  return (\n    <th onClick={() => handleSort(statistic)}>\n      <div className=\"heading-content\">\n        <abbr\n          className={classnames({[`is-${statistic}`]: breakpoint === 'S'})}\n          title={statistic}\n        >\n          {breakpoint === 'L'\n            ? statistic.slice(0)\n            : breakpoint === 'S'\n            ? capitalize(\n                abbreviate(statistic === 'deaths' ? 'deceased' : statistic)\n              )\n            : t(capitalize(statistic === 'deaths' ? 'deceased' : statistic))}\n        </abbr>\n        <div\n          style={{\n            display: sortData.sortColumn === statistic ? 'initial' : 'none',\n          }}\n        >\n          <div\n            className={classnames(\n              {'arrow-up': sortData.isAscending},\n              {'arrow-down': !sortData.isAscending}\n            )}\n          />\n        </div>\n      </div>\n    </th>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  return equal(prevProps.regionHighlighted, currProps.regionHighlighted);\n};\n\nfunction Table({\n  states,\n  districts,\n  zones,\n  regionHighlighted,\n  onHighlightState,\n  onHighlightDistrict,\n}) {\n  const [sortData, setSortData] = useLocalStorage('sortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n  });\n\n  const {t} = useTranslation();\n\n  const [sortedStates, setSortedStates] = useState(\n    states.filter((state) => state.statecode !== 'TT')\n  );\n\n  const FineprintTop = useMemo(\n    () => (\n      <React.Fragment>\n        <h5\n          className=\"table-fineprint fadeInUp\"\n          style={{animationDelay: '1.5s'}}\n        >\n          {t('Compiled from State Govt. numbers')},{' '}\n          <Link to=\"/about\" style={{color: '#6c757d'}}>\n            {t('know more')}!\n          </Link>\n        </h5>\n        <h5\n          className=\"table-fineprint fadeInUp\"\n          style={{animationDelay: '1.5s'}}\n        >\n          {t('District zones as published by MoHFW')}\n          {', '}\n          <a\n            href=\"https://www.facebook.com/airnewsalerts/photos/a.262571017217636/1710062729135117/?type=3&theater\"\n            style={{color: '#6c757d'}}\n          >\n            {t('source')}\n          </a>\n        </h5>\n      </React.Fragment>\n    ),\n    [t]\n  );\n\n  const FineprintBottom = useMemo(\n    () => (\n      <h5 className=\"table-fineprint fadeInUp\" style={{animationDelay: '1s'}}>\n        {states.slice(1).filter((s) => s && s.confirmed > 0).length} States/UTS\n        Affected\n      </h5>\n    ),\n    [states]\n  );\n\n  const doSort = useCallback(\n    (sortData) => {\n      const newSortedStates = [...sortedStates].sort((x, y) => {\n        if (sortData.sortColumn !== 'state') {\n          return sortData.isAscending\n            ? parseInt(x[sortData.sortColumn]) -\n                parseInt(y[sortData.sortColumn])\n            : parseInt(y[sortData.sortColumn]) -\n                parseInt(x[sortData.sortColumn]);\n        } else {\n          return sortData.isAscending\n            ? x[sortData.sortColumn].localeCompare(y[sortData.sortColumn])\n            : y[sortData.sortColumn].localeCompare(x[sortData.sortColumn]);\n        }\n      });\n      setSortedStates(newSortedStates);\n    },\n    [sortedStates]\n  );\n\n  const handleSort = useCallback(\n    (statistic) => {\n      const newSortData = {\n        isAscending: !sortData.isAscending,\n        sortColumn: statistic,\n      };\n      doSort(newSortData);\n      setSortData(Object.assign({}, sortData, newSortData));\n    },\n    [doSort, setSortData, sortData]\n  );\n\n  useEffectOnce(() => {\n    doSort(sortData);\n  });\n\n  if (states.length > 0) {\n    return (\n      <React.Fragment>\n        <ReactTooltip\n          place=\"right\"\n          type=\"dark\"\n          effect=\"solid\"\n          multiline={true}\n          globalEventOff=\"click\"\n        />\n\n        {FineprintTop}\n\n        <table className=\"table fadeInUp\" style={{animationDelay: '1.8s'}}>\n          <thead>\n            <tr>\n              <th className=\"state-heading\" onClick={() => handleSort('state')}>\n                <div className=\"heading-content\">\n                  <abbr title=\"State\">{t('State/UT')}</abbr>\n                  <div\n                    style={{\n                      display:\n                        sortData.sortColumn === 'state' ? 'initial' : 'none',\n                    }}\n                  >\n                    <div\n                      className={classnames(\n                        {'arrow-up': sortData.isAscending},\n                        {'arrow-down': !sortData.isAscending}\n                      )}\n                    />\n                  </div>\n                </div>\n              </th>\n              {STATE_ROW_STATISTICS.map((statistic, index) => (\n                <StateHeaderCell\n                  key={index}\n                  handleSort={handleSort}\n                  sortData={sortData}\n                  statistic={statistic}\n                />\n              ))}\n            </tr>\n          </thead>\n\n          {states && (\n            <tbody>\n              {sortedStates.map((state, index) => {\n                if (state.confirmed > 0 && state.statecode !== 'TT') {\n                  return (\n                    <Row\n                      key={state.statecode}\n                      state={state}\n                      districts={districts[state.state]?.districtData}\n                      zones={zones[state.state]}\n                      regionHighlighted={\n                        equal(regionHighlighted?.state, state.state)\n                          ? regionHighlighted\n                          : null\n                      }\n                      onHighlightState={onHighlightState}\n                      onHighlightDistrict={onHighlightDistrict}\n                    />\n                  );\n                }\n                return null;\n              })}\n            </tbody>\n          )}\n\n          {states && (\n            <tbody>\n              <Row\n                key={0}\n                state={states[0]}\n                onHighlightState={onHighlightState}\n              />\n            </tbody>\n          )}\n        </table>\n        {states && FineprintBottom}\n      </React.Fragment>\n    );\n  } else {\n    return <div style={{height: '50rem'}}></div>;\n  }\n}\n\nexport default React.memo(Table, isEqual);\n","import axios from 'axios';\nimport {formatDistance, format} from 'date-fns';\nimport React, {useState, useLayoutEffect} from 'react';\nimport {useEffectOnce} from 'react-use';\n\nconst newDate = new Date();\nlet currentDate = newDate;\n\nfunction Updates(props) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffectOnce(() => {\n    axios\n      .get('https://api.covid19india.org/updatelog/log.json')\n      .then((response) => {\n        setUpdates(response.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  });\n\n  // reset the currentDate after rendering is complete\n  // in case the currentDate was changed during addHeader\n  useLayoutEffect(() => {\n    currentDate = newDate;\n  });\n\n  return (\n    <div className=\"updates\">\n      <div className=\"updates-header\">\n        <h2>{format(currentDate, 'd MMM')}</h2>\n      </div>\n\n      {updates\n        .slice(-5)\n        .reverse()\n        .map(function (activity, index) {\n          activity.update = activity.update.replace(/\\n/g, '<br/>');\n          const activityDate = new Date(activity.timestamp * 1000);\n          const addHeader = () => {\n            currentDate = activityDate;\n\n            return (\n              <React.Fragment>\n                {index === 0 ? (\n                  <div className=\"update\">\n                    <h4>No updates yet!</h4>\n                  </div>\n                ) : (\n                  ''\n                )}\n                <div className=\"updates-header\">\n                  <h2>{format(activityDate, 'd MMM')}</h2>\n                </div>\n              </React.Fragment>\n            );\n          };\n\n          return (\n            <React.Fragment key={index}>\n              {activityDate.getDate() !== currentDate.getDate()\n                ? addHeader()\n                : ' '}\n              <div key={index} className=\"update\">\n                <h5>\n                  {formatDistance(\n                    new Date(activity.timestamp * 1000),\n                    new Date()\n                  ) + ' ago'}\n                </h5>\n                <h4\n                  dangerouslySetInnerHTML={{\n                    __html: activity.update,\n                  }}\n                ></h4>\n              </div>\n            </React.Fragment>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default Updates;\n","import Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport Search from './search';\nimport Table from './table';\nimport TimeSeriesExplorer from './timeseriesexplorer';\nimport Updates from './updates';\n\nimport {STATE_CODES_REVERSE} from '../constants';\nimport {\n  formatDate,\n  formatDateAbsolute,\n  mergeTimeseries,\n  preprocessTimeseries,\n  parseStateTimeseries,\n  parseStateTestData,\n  parseStateTestTimeseries,\n  parseTotalTestTimeseries,\n  parseDistrictZones,\n} from '../utils/commonfunctions';\n\nimport axios from 'axios';\nimport React, {useState, useCallback, useMemo} from 'react';\nimport * as Icon from 'react-feather';\nimport {Helmet} from 'react-helmet';\nimport {useEffectOnce, useLocalStorage} from 'react-use';\n\nfunction Home(props) {\n  const [states, setStates] = useState(null);\n  const [stateDistrictWiseData, setStateDistrictWiseData] = useState(null);\n  const [districtZones, setDistrictZones] = useState(null);\n  const [stateTestData, setStateTestData] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState('');\n  const [timeseries, setTimeseries] = useState(null);\n  const [fetched, setFetched] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    state: 'Total',\n  });\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [anchor, setAnchor] = useState(null);\n  const [mapOption, setMapOption] = useState('confirmed');\n\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage(\n    'lastViewedLog',\n    null\n  );\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n\n  const Bell = useMemo(\n    () => (\n      <Icon.Bell\n        onClick={() => {\n          setShowUpdates(!showUpdates);\n          setNewUpdate(false);\n        }}\n      />\n    ),\n    [setNewUpdate, showUpdates]\n  );\n\n  const BellOff = useMemo(\n    () => (\n      <Icon.BellOff\n        onClick={() => {\n          setShowUpdates(!showUpdates);\n        }}\n      />\n    ),\n    [showUpdates]\n  );\n\n  useEffectOnce(() => {\n    getStates();\n  });\n\n  useEffectOnce(() => {\n    axios\n      .get('https://api.covid19india.org/updatelog/log.json')\n      .then((response) => {\n        const lastTimestamp = response.data\n          .slice()\n          .reverse()[0]\n          .timestamp.toString();\n        if (lastTimestamp !== lastViewedLog) {\n          setNewUpdate(true);\n          setLastViewedLog(lastTimestamp);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  });\n\n  const getStates = async () => {\n    try {\n      const [\n        {data: statesDailyResponse},\n        {data: zonesResponse},\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/states_daily.json'),\n        axios.get('https://api.covid19india.org/zones.json'),\n      ]);\n\n      const [\n        {data},\n        {data: stateDistrictWiseResponse},\n        {data: stateTestData},\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\n        axios.get('https://api.covid19india.org/state_test_data.json'),\n      ]);\n\n      setStates(data.statewise);\n      setDistrictZones(parseDistrictZones(zonesResponse.zones));\n\n      const ts = parseStateTimeseries(statesDailyResponse);\n      ts['TT'] = preprocessTimeseries(data.cases_time_series);\n      // Testing data timeseries\n      const testTs = parseStateTestTimeseries(stateTestData.states_tested_data);\n      testTs['TT'] = parseTotalTestTimeseries(data.tested);\n      // Merge\n      const tsMerged = mergeTimeseries(ts, testTs);\n      setTimeseries(tsMerged);\n\n      setLastUpdated(data.statewise[0].lastupdatedtime);\n\n      const testData = parseStateTestData(stateTestData.states_tested_data);\n      const totalTest = data.tested[data.tested.length - 1];\n      testData['Total'] = {\n        source: totalTest.source,\n        totaltested: totalTest.totalsamplestested,\n        updatedon: totalTest.updatetimestamp.split(' ')[0],\n      };\n      setStateTestData(testData);\n\n      setStateDistrictWiseData(stateDistrictWiseResponse);\n      setFetched(true);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onHighlightState = useCallback((state) => {\n    if (!state) return setRegionHighlighted(null);\n    setRegionHighlighted({state: state.state});\n  }, []);\n\n  const onHighlightDistrict = useCallback((district, state) => {\n    if (!state && !district) return setRegionHighlighted(null);\n    setRegionHighlighted({district, state: state.state});\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"Home\">\n        <Helmet>\n          <title>Coronavirus Outbreak in India - covid19india.org</title>\n          <meta\n            name=\"title\"\n            content=\"Coronavirus Outbreak in India: Latest Map and Case Count\"\n          />\n        </Helmet>\n\n        <div className=\"home-left\">\n          <div className=\"header fadeInUp\" style={{animationDelay: '1s'}}>\n            {fetched && <Search districtZones={districtZones} />}\n\n            <div className=\"actions\">\n              <h5>\n                {isNaN(Date.parse(formatDate(lastUpdated)))\n                  ? ''\n                  : `${formatDateAbsolute(lastUpdated)} IST`}\n              </h5>\n              {fetched && !showUpdates && (\n                <div className=\"bell-icon\">\n                  {fetched && Bell}\n                  {newUpdate && <div className=\"indicator\"></div>}\n                </div>\n              )}\n              {fetched && showUpdates && BellOff}\n            </div>\n          </div>\n\n          {showUpdates && <Updates />}\n\n          {states && <Level data={states[0]} />}\n          {timeseries && <Minigraph timeseries={timeseries['TT']} />}\n          {stateDistrictWiseData && (\n            <Table\n              states={states}\n              summary={false}\n              districts={stateDistrictWiseData}\n              zones={districtZones}\n              regionHighlighted={regionHighlighted}\n              setRegionHighlighted={setRegionHighlighted}\n              onHighlightState={onHighlightState}\n              onHighlightDistrict={onHighlightDistrict}\n            />\n          )}\n        </div>\n\n        <div className=\"home-right\">\n          <React.Fragment>\n            {fetched && (\n              <MapExplorer\n                mapName={'India'}\n                states={states}\n                districts={stateDistrictWiseData}\n                zones={districtZones}\n                stateTestData={stateTestData}\n                regionHighlighted={regionHighlighted}\n                setRegionHighlighted={setRegionHighlighted}\n                anchor={anchor}\n                setAnchor={setAnchor}\n                mapOption={mapOption}\n                setMapOption={setMapOption}\n              />\n            )}\n\n            {timeseries && (\n              <TimeSeriesExplorer\n                timeseries={\n                  timeseries[\n                    STATE_CODES_REVERSE[regionHighlighted?.state] || 'TT'\n                  ]\n                }\n                activeStateCode={\n                  STATE_CODES_REVERSE[regionHighlighted?.state] || 'TT'\n                }\n                onHighlightState={onHighlightState}\n                states={states}\n                anchor={anchor}\n                setAnchor={setAnchor}\n              />\n            )}\n          </React.Fragment>\n        </div>\n      </div>\n      {fetched && <Footer />}\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n"],"sourceRoot":""}